// Code generated by ent, DO NOT EDIT.

package custompage

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the custompage type in the database.
	Label = "custom_page"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIconId holds the string denoting the iconid field in the database.
	FieldIconId = "icon_id"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldTitleNormalized holds the string denoting the titlenormalized field in the database.
	FieldTitleNormalized = "title_normalized"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldIsExternal holds the string denoting the isexternal field in the database.
	FieldIsExternal = "is_external"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldSection holds the string denoting the section field in the database.
	FieldSection = "section"
	// EdgeAttachments holds the string denoting the attachments edge name in mutations.
	EdgeAttachments = "attachments"
	// Table holds the table name of the custompage in the database.
	Table = "custom_pages"
	// AttachmentsTable is the table that holds the attachments relation/edge.
	AttachmentsTable = "attachments"
	// AttachmentsInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentsInverseTable = "attachments"
	// AttachmentsColumn is the table column denoting the attachments relation/edge.
	AttachmentsColumn = "custom_page_attachments"
)

// Columns holds all SQL columns for custompage fields.
var Columns = []string{
	FieldID,
	FieldIconId,
	FieldUpdateTime,
	FieldTitle,
	FieldTitleNormalized,
	FieldContent,
	FieldIsExternal,
	FieldLink,
	FieldSection,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
