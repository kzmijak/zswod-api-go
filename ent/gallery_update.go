// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/article"
	"github.com/kzmijak/zswod_api_go/ent/gallery"
	"github.com/kzmijak/zswod_api_go/ent/image"
	"github.com/kzmijak/zswod_api_go/ent/predicate"
)

// GalleryUpdate is the builder for updating Gallery entities.
type GalleryUpdate struct {
	config
	hooks    []Hook
	mutation *GalleryMutation
}

// Where appends a list predicates to the GalleryUpdate builder.
func (gu *GalleryUpdate) Where(ps ...predicate.Gallery) *GalleryUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetTitle sets the "title" field.
func (gu *GalleryUpdate) SetTitle(s string) *GalleryUpdate {
	gu.mutation.SetTitle(s)
	return gu
}

// SetCreatedAt sets the "createdAt" field.
func (gu *GalleryUpdate) SetCreatedAt(t time.Time) *GalleryUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (gu *GalleryUpdate) AddImageIDs(ids ...uuid.UUID) *GalleryUpdate {
	gu.mutation.AddImageIDs(ids...)
	return gu
}

// AddImages adds the "images" edges to the Image entity.
func (gu *GalleryUpdate) AddImages(i ...*Image) *GalleryUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddImageIDs(ids...)
}

// AddArticleIDs adds the "article" edge to the Article entity by IDs.
func (gu *GalleryUpdate) AddArticleIDs(ids ...uuid.UUID) *GalleryUpdate {
	gu.mutation.AddArticleIDs(ids...)
	return gu
}

// AddArticle adds the "article" edges to the Article entity.
func (gu *GalleryUpdate) AddArticle(a ...*Article) *GalleryUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gu.AddArticleIDs(ids...)
}

// Mutation returns the GalleryMutation object of the builder.
func (gu *GalleryUpdate) Mutation() *GalleryMutation {
	return gu.mutation
}

// ClearImages clears all "images" edges to the Image entity.
func (gu *GalleryUpdate) ClearImages() *GalleryUpdate {
	gu.mutation.ClearImages()
	return gu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (gu *GalleryUpdate) RemoveImageIDs(ids ...uuid.UUID) *GalleryUpdate {
	gu.mutation.RemoveImageIDs(ids...)
	return gu
}

// RemoveImages removes "images" edges to Image entities.
func (gu *GalleryUpdate) RemoveImages(i ...*Image) *GalleryUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveImageIDs(ids...)
}

// ClearArticle clears all "article" edges to the Article entity.
func (gu *GalleryUpdate) ClearArticle() *GalleryUpdate {
	gu.mutation.ClearArticle()
	return gu
}

// RemoveArticleIDs removes the "article" edge to Article entities by IDs.
func (gu *GalleryUpdate) RemoveArticleIDs(ids ...uuid.UUID) *GalleryUpdate {
	gu.mutation.RemoveArticleIDs(ids...)
	return gu
}

// RemoveArticle removes "article" edges to Article entities.
func (gu *GalleryUpdate) RemoveArticle(a ...*Article) *GalleryUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gu.RemoveArticleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GalleryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GalleryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GalleryUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GalleryUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GalleryUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GalleryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gallery.Table,
			Columns: gallery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gallery.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Title(); ok {
		_spec.SetField(gallery.FieldTitle, field.TypeString, value)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(gallery.FieldCreatedAt, field.TypeTime, value)
	}
	if gu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ImagesTable,
			Columns: []string{gallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !gu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ImagesTable,
			Columns: []string{gallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ImagesTable,
			Columns: []string{gallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ArticleTable,
			Columns: []string{gallery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedArticleIDs(); len(nodes) > 0 && !gu.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ArticleTable,
			Columns: []string{gallery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ArticleTable,
			Columns: []string{gallery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gallery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GalleryUpdateOne is the builder for updating a single Gallery entity.
type GalleryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GalleryMutation
}

// SetTitle sets the "title" field.
func (guo *GalleryUpdateOne) SetTitle(s string) *GalleryUpdateOne {
	guo.mutation.SetTitle(s)
	return guo
}

// SetCreatedAt sets the "createdAt" field.
func (guo *GalleryUpdateOne) SetCreatedAt(t time.Time) *GalleryUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (guo *GalleryUpdateOne) AddImageIDs(ids ...uuid.UUID) *GalleryUpdateOne {
	guo.mutation.AddImageIDs(ids...)
	return guo
}

// AddImages adds the "images" edges to the Image entity.
func (guo *GalleryUpdateOne) AddImages(i ...*Image) *GalleryUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddImageIDs(ids...)
}

// AddArticleIDs adds the "article" edge to the Article entity by IDs.
func (guo *GalleryUpdateOne) AddArticleIDs(ids ...uuid.UUID) *GalleryUpdateOne {
	guo.mutation.AddArticleIDs(ids...)
	return guo
}

// AddArticle adds the "article" edges to the Article entity.
func (guo *GalleryUpdateOne) AddArticle(a ...*Article) *GalleryUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return guo.AddArticleIDs(ids...)
}

// Mutation returns the GalleryMutation object of the builder.
func (guo *GalleryUpdateOne) Mutation() *GalleryMutation {
	return guo.mutation
}

// ClearImages clears all "images" edges to the Image entity.
func (guo *GalleryUpdateOne) ClearImages() *GalleryUpdateOne {
	guo.mutation.ClearImages()
	return guo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (guo *GalleryUpdateOne) RemoveImageIDs(ids ...uuid.UUID) *GalleryUpdateOne {
	guo.mutation.RemoveImageIDs(ids...)
	return guo
}

// RemoveImages removes "images" edges to Image entities.
func (guo *GalleryUpdateOne) RemoveImages(i ...*Image) *GalleryUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveImageIDs(ids...)
}

// ClearArticle clears all "article" edges to the Article entity.
func (guo *GalleryUpdateOne) ClearArticle() *GalleryUpdateOne {
	guo.mutation.ClearArticle()
	return guo
}

// RemoveArticleIDs removes the "article" edge to Article entities by IDs.
func (guo *GalleryUpdateOne) RemoveArticleIDs(ids ...uuid.UUID) *GalleryUpdateOne {
	guo.mutation.RemoveArticleIDs(ids...)
	return guo
}

// RemoveArticle removes "article" edges to Article entities.
func (guo *GalleryUpdateOne) RemoveArticle(a ...*Article) *GalleryUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return guo.RemoveArticleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GalleryUpdateOne) Select(field string, fields ...string) *GalleryUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Gallery entity.
func (guo *GalleryUpdateOne) Save(ctx context.Context) (*Gallery, error) {
	var (
		err  error
		node *Gallery
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GalleryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Gallery)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GalleryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GalleryUpdateOne) SaveX(ctx context.Context) *Gallery {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GalleryUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GalleryUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GalleryUpdateOne) sqlSave(ctx context.Context) (_node *Gallery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gallery.Table,
			Columns: gallery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gallery.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Gallery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gallery.FieldID)
		for _, f := range fields {
			if !gallery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gallery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Title(); ok {
		_spec.SetField(gallery.FieldTitle, field.TypeString, value)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(gallery.FieldCreatedAt, field.TypeTime, value)
	}
	if guo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ImagesTable,
			Columns: []string{gallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !guo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ImagesTable,
			Columns: []string{gallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ImagesTable,
			Columns: []string{gallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ArticleTable,
			Columns: []string{gallery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedArticleIDs(); len(nodes) > 0 && !guo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ArticleTable,
			Columns: []string{gallery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ArticleTable,
			Columns: []string{gallery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Gallery{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gallery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
