// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/resetpasswordtoken"
	"github.com/kzmijak/zswod_api_go/ent/user"
)

// ResetPasswordToken is the model entity for the ResetPasswordToken schema.
type ResetPasswordToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResetPasswordTokenQuery when eager-loading is set.
	Edges                      ResetPasswordTokenEdges `json:"edges"`
	user_reset_password_tokens *uuid.UUID
}

// ResetPasswordTokenEdges holds the relations/edges for other nodes in the graph.
type ResetPasswordTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResetPasswordTokenEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResetPasswordToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resetpasswordtoken.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case resetpasswordtoken.FieldID:
			values[i] = new(uuid.UUID)
		case resetpasswordtoken.ForeignKeys[0]: // user_reset_password_tokens
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ResetPasswordToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResetPasswordToken fields.
func (rpt *ResetPasswordToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resetpasswordtoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rpt.ID = *value
			}
		case resetpasswordtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				rpt.CreatedAt = value.Time
			}
		case resetpasswordtoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_reset_password_tokens", values[i])
			} else if value.Valid {
				rpt.user_reset_password_tokens = new(uuid.UUID)
				*rpt.user_reset_password_tokens = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the ResetPasswordToken entity.
func (rpt *ResetPasswordToken) QueryOwner() *UserQuery {
	return (&ResetPasswordTokenClient{config: rpt.config}).QueryOwner(rpt)
}

// Update returns a builder for updating this ResetPasswordToken.
// Note that you need to call ResetPasswordToken.Unwrap() before calling this method if this ResetPasswordToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpt *ResetPasswordToken) Update() *ResetPasswordTokenUpdateOne {
	return (&ResetPasswordTokenClient{config: rpt.config}).UpdateOne(rpt)
}

// Unwrap unwraps the ResetPasswordToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rpt *ResetPasswordToken) Unwrap() *ResetPasswordToken {
	_tx, ok := rpt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResetPasswordToken is not a transactional entity")
	}
	rpt.config.driver = _tx.drv
	return rpt
}

// String implements the fmt.Stringer.
func (rpt *ResetPasswordToken) String() string {
	var builder strings.Builder
	builder.WriteString("ResetPasswordToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rpt.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(rpt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResetPasswordTokens is a parsable slice of ResetPasswordToken.
type ResetPasswordTokens []*ResetPasswordToken

func (rpt ResetPasswordTokens) config(cfg config) {
	for _i := range rpt {
		rpt[_i].config = cfg
	}
}
