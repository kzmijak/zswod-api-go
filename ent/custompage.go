// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/custompage"
)

// CustomPage is the model entity for the CustomPage schema.
type CustomPage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IconId holds the value of the "iconId" field.
	IconId string `json:"iconId,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// TitleNormalized holds the value of the "titleNormalized" field.
	TitleNormalized string `json:"titleNormalized,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// IsExternal holds the value of the "isExternal" field.
	IsExternal bool `json:"isExternal,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Section holds the value of the "section" field.
	Section string `json:"section,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomPageQuery when eager-loading is set.
	Edges CustomPageEdges `json:"edges"`
}

// CustomPageEdges holds the relations/edges for other nodes in the graph.
type CustomPageEdges struct {
	// Attachments holds the value of the attachments edge.
	Attachments []*Attachment `json:"attachments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AttachmentsOrErr returns the Attachments value or an error if the edge
// was not loaded in eager-loading.
func (e CustomPageEdges) AttachmentsOrErr() ([]*Attachment, error) {
	if e.loadedTypes[0] {
		return e.Attachments, nil
	}
	return nil, &NotLoadedError{edge: "attachments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomPage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case custompage.FieldIsExternal:
			values[i] = new(sql.NullBool)
		case custompage.FieldIconId, custompage.FieldTitle, custompage.FieldTitleNormalized, custompage.FieldContent, custompage.FieldLink, custompage.FieldSection:
			values[i] = new(sql.NullString)
		case custompage.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case custompage.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomPage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomPage fields.
func (cp *CustomPage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case custompage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cp.ID = *value
			}
		case custompage.FieldIconId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iconId", values[i])
			} else if value.Valid {
				cp.IconId = value.String
			}
		case custompage.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cp.UpdateTime = value.Time
			}
		case custompage.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cp.Title = value.String
			}
		case custompage.FieldTitleNormalized:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field titleNormalized", values[i])
			} else if value.Valid {
				cp.TitleNormalized = value.String
			}
		case custompage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				cp.Content = value.String
			}
		case custompage.FieldIsExternal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isExternal", values[i])
			} else if value.Valid {
				cp.IsExternal = value.Bool
			}
		case custompage.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				cp.Link = value.String
			}
		case custompage.FieldSection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field section", values[i])
			} else if value.Valid {
				cp.Section = value.String
			}
		}
	}
	return nil
}

// QueryAttachments queries the "attachments" edge of the CustomPage entity.
func (cp *CustomPage) QueryAttachments() *AttachmentQuery {
	return (&CustomPageClient{config: cp.config}).QueryAttachments(cp)
}

// Update returns a builder for updating this CustomPage.
// Note that you need to call CustomPage.Unwrap() before calling this method if this CustomPage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CustomPage) Update() *CustomPageUpdateOne {
	return (&CustomPageClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the CustomPage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CustomPage) Unwrap() *CustomPage {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomPage is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CustomPage) String() string {
	var builder strings.Builder
	builder.WriteString("CustomPage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("iconId=")
	builder.WriteString(cp.IconId)
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(cp.Title)
	builder.WriteString(", ")
	builder.WriteString("titleNormalized=")
	builder.WriteString(cp.TitleNormalized)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(cp.Content)
	builder.WriteString(", ")
	builder.WriteString("isExternal=")
	builder.WriteString(fmt.Sprintf("%v", cp.IsExternal))
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(cp.Link)
	builder.WriteString(", ")
	builder.WriteString("section=")
	builder.WriteString(cp.Section)
	builder.WriteByte(')')
	return builder.String()
}

// CustomPages is a parsable slice of CustomPage.
type CustomPages []*CustomPage

func (cp CustomPages) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
