// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/article"
	"github.com/kzmijak/zswod_api_go/ent/image"
	"github.com/kzmijak/zswod_api_go/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FirstName holds the value of the "firstName" field.
	FirstName string `json:"firstName,omitempty"`
	// LastName holds the value of the "lastName" field.
	LastName string `json:"lastName,omitempty"`
	// Role holds the value of the "role" field.
	Role user.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges       UserEdges `json:"edges"`
	user_avatar *uuid.UUID
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Galleries holds the value of the galleries edge.
	Galleries []*Gallery `json:"galleries,omitempty"`
	// Articles holds the value of the articles edge.
	Articles *Article `json:"articles,omitempty"`
	// Avatar holds the value of the avatar edge.
	Avatar *Image `json:"avatar,omitempty"`
	// ResetPasswordTokens holds the value of the resetPasswordTokens edge.
	ResetPasswordTokens []*ResetPasswordToken `json:"resetPasswordTokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// GalleriesOrErr returns the Galleries value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GalleriesOrErr() ([]*Gallery, error) {
	if e.loadedTypes[0] {
		return e.Galleries, nil
	}
	return nil, &NotLoadedError{edge: "galleries"}
}

// ArticlesOrErr returns the Articles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ArticlesOrErr() (*Article, error) {
	if e.loadedTypes[1] {
		if e.Articles == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: article.Label}
		}
		return e.Articles, nil
	}
	return nil, &NotLoadedError{edge: "articles"}
}

// AvatarOrErr returns the Avatar value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AvatarOrErr() (*Image, error) {
	if e.loadedTypes[2] {
		if e.Avatar == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: image.Label}
		}
		return e.Avatar, nil
	}
	return nil, &NotLoadedError{edge: "avatar"}
}

// ResetPasswordTokensOrErr returns the ResetPasswordTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ResetPasswordTokensOrErr() ([]*ResetPasswordToken, error) {
	if e.loadedTypes[3] {
		return e.ResetPasswordTokens, nil
	}
	return nil, &NotLoadedError{edge: "resetPasswordTokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldPassword, user.FieldEmail, user.FieldFirstName, user.FieldLastName, user.FieldRole:
			values[i] = new(sql.NullString)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		case user.ForeignKeys[0]: // user_avatar
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstName", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastName", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = user.Role(value.String)
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_avatar", values[i])
			} else if value.Valid {
				u.user_avatar = new(uuid.UUID)
				*u.user_avatar = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryGalleries queries the "galleries" edge of the User entity.
func (u *User) QueryGalleries() *GalleryQuery {
	return (&UserClient{config: u.config}).QueryGalleries(u)
}

// QueryArticles queries the "articles" edge of the User entity.
func (u *User) QueryArticles() *ArticleQuery {
	return (&UserClient{config: u.config}).QueryArticles(u)
}

// QueryAvatar queries the "avatar" edge of the User entity.
func (u *User) QueryAvatar() *ImageQuery {
	return (&UserClient{config: u.config}).QueryAvatar(u)
}

// QueryResetPasswordTokens queries the "resetPasswordTokens" edge of the User entity.
func (u *User) QueryResetPasswordTokens() *ResetPasswordTokenQuery {
	return (&UserClient{config: u.config}).QueryResetPasswordTokens(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("firstName=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("lastName=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
