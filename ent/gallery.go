// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/gallery"
)

// Gallery is the model entity for the Gallery schema.
type Gallery struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GalleryQuery when eager-loading is set.
	Edges GalleryEdges `json:"edges"`
}

// GalleryEdges holds the relations/edges for other nodes in the graph.
type GalleryEdges struct {
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// Article holds the value of the article edge.
	Article []*Article `json:"article,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e GalleryEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[0] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading.
func (e GalleryEdges) ArticleOrErr() ([]*Article, error) {
	if e.loadedTypes[1] {
		return e.Article, nil
	}
	return nil, &NotLoadedError{edge: "article"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gallery) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gallery.FieldTitle:
			values[i] = new(sql.NullString)
		case gallery.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case gallery.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Gallery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gallery fields.
func (ga *Gallery) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gallery.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ga.ID = *value
			}
		case gallery.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ga.Title = value.String
			}
		case gallery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryImages queries the "images" edge of the Gallery entity.
func (ga *Gallery) QueryImages() *ImageQuery {
	return (&GalleryClient{config: ga.config}).QueryImages(ga)
}

// QueryArticle queries the "article" edge of the Gallery entity.
func (ga *Gallery) QueryArticle() *ArticleQuery {
	return (&GalleryClient{config: ga.config}).QueryArticle(ga)
}

// Update returns a builder for updating this Gallery.
// Note that you need to call Gallery.Unwrap() before calling this method if this Gallery
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Gallery) Update() *GalleryUpdateOne {
	return (&GalleryClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the Gallery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Gallery) Unwrap() *Gallery {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gallery is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Gallery) String() string {
	var builder strings.Builder
	builder.WriteString("Gallery(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("title=")
	builder.WriteString(ga.Title)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Galleries is a parsable slice of Gallery.
type Galleries []*Gallery

func (ga Galleries) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
