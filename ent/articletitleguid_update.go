// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/article"
	"github.com/kzmijak/zswod_api_go/ent/articletitleguid"
	"github.com/kzmijak/zswod_api_go/ent/predicate"
)

// ArticleTitleGuidUpdate is the builder for updating ArticleTitleGuid entities.
type ArticleTitleGuidUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleTitleGuidMutation
}

// Where appends a list predicates to the ArticleTitleGuidUpdate builder.
func (atgu *ArticleTitleGuidUpdate) Where(ps ...predicate.ArticleTitleGuid) *ArticleTitleGuidUpdate {
	atgu.mutation.Where(ps...)
	return atgu
}

// SetTitleNormalized sets the "titleNormalized" field.
func (atgu *ArticleTitleGuidUpdate) SetTitleNormalized(s string) *ArticleTitleGuidUpdate {
	atgu.mutation.SetTitleNormalized(s)
	return atgu
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (atgu *ArticleTitleGuidUpdate) SetArticleID(id uuid.UUID) *ArticleTitleGuidUpdate {
	atgu.mutation.SetArticleID(id)
	return atgu
}

// SetArticle sets the "article" edge to the Article entity.
func (atgu *ArticleTitleGuidUpdate) SetArticle(a *Article) *ArticleTitleGuidUpdate {
	return atgu.SetArticleID(a.ID)
}

// Mutation returns the ArticleTitleGuidMutation object of the builder.
func (atgu *ArticleTitleGuidUpdate) Mutation() *ArticleTitleGuidMutation {
	return atgu.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (atgu *ArticleTitleGuidUpdate) ClearArticle() *ArticleTitleGuidUpdate {
	atgu.mutation.ClearArticle()
	return atgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atgu *ArticleTitleGuidUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(atgu.hooks) == 0 {
		if err = atgu.check(); err != nil {
			return 0, err
		}
		affected, err = atgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticleTitleGuidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atgu.check(); err != nil {
				return 0, err
			}
			atgu.mutation = mutation
			affected, err = atgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atgu.hooks) - 1; i >= 0; i-- {
			if atgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atgu *ArticleTitleGuidUpdate) SaveX(ctx context.Context) int {
	affected, err := atgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atgu *ArticleTitleGuidUpdate) Exec(ctx context.Context) error {
	_, err := atgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atgu *ArticleTitleGuidUpdate) ExecX(ctx context.Context) {
	if err := atgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atgu *ArticleTitleGuidUpdate) check() error {
	if _, ok := atgu.mutation.ArticleID(); atgu.mutation.ArticleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArticleTitleGuid.article"`)
	}
	return nil
}

func (atgu *ArticleTitleGuidUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   articletitleguid.Table,
			Columns: articletitleguid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: articletitleguid.FieldID,
			},
		},
	}
	if ps := atgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atgu.mutation.TitleNormalized(); ok {
		_spec.SetField(articletitleguid.FieldTitleNormalized, field.TypeString, value)
	}
	if atgu.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   articletitleguid.ArticleTable,
			Columns: []string{articletitleguid.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atgu.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   articletitleguid.ArticleTable,
			Columns: []string{articletitleguid.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articletitleguid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ArticleTitleGuidUpdateOne is the builder for updating a single ArticleTitleGuid entity.
type ArticleTitleGuidUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleTitleGuidMutation
}

// SetTitleNormalized sets the "titleNormalized" field.
func (atguo *ArticleTitleGuidUpdateOne) SetTitleNormalized(s string) *ArticleTitleGuidUpdateOne {
	atguo.mutation.SetTitleNormalized(s)
	return atguo
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (atguo *ArticleTitleGuidUpdateOne) SetArticleID(id uuid.UUID) *ArticleTitleGuidUpdateOne {
	atguo.mutation.SetArticleID(id)
	return atguo
}

// SetArticle sets the "article" edge to the Article entity.
func (atguo *ArticleTitleGuidUpdateOne) SetArticle(a *Article) *ArticleTitleGuidUpdateOne {
	return atguo.SetArticleID(a.ID)
}

// Mutation returns the ArticleTitleGuidMutation object of the builder.
func (atguo *ArticleTitleGuidUpdateOne) Mutation() *ArticleTitleGuidMutation {
	return atguo.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (atguo *ArticleTitleGuidUpdateOne) ClearArticle() *ArticleTitleGuidUpdateOne {
	atguo.mutation.ClearArticle()
	return atguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atguo *ArticleTitleGuidUpdateOne) Select(field string, fields ...string) *ArticleTitleGuidUpdateOne {
	atguo.fields = append([]string{field}, fields...)
	return atguo
}

// Save executes the query and returns the updated ArticleTitleGuid entity.
func (atguo *ArticleTitleGuidUpdateOne) Save(ctx context.Context) (*ArticleTitleGuid, error) {
	var (
		err  error
		node *ArticleTitleGuid
	)
	if len(atguo.hooks) == 0 {
		if err = atguo.check(); err != nil {
			return nil, err
		}
		node, err = atguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticleTitleGuidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atguo.check(); err != nil {
				return nil, err
			}
			atguo.mutation = mutation
			node, err = atguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atguo.hooks) - 1; i >= 0; i-- {
			if atguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, atguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ArticleTitleGuid)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArticleTitleGuidMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atguo *ArticleTitleGuidUpdateOne) SaveX(ctx context.Context) *ArticleTitleGuid {
	node, err := atguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atguo *ArticleTitleGuidUpdateOne) Exec(ctx context.Context) error {
	_, err := atguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atguo *ArticleTitleGuidUpdateOne) ExecX(ctx context.Context) {
	if err := atguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atguo *ArticleTitleGuidUpdateOne) check() error {
	if _, ok := atguo.mutation.ArticleID(); atguo.mutation.ArticleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArticleTitleGuid.article"`)
	}
	return nil
}

func (atguo *ArticleTitleGuidUpdateOne) sqlSave(ctx context.Context) (_node *ArticleTitleGuid, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   articletitleguid.Table,
			Columns: articletitleguid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: articletitleguid.FieldID,
			},
		},
	}
	id, ok := atguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArticleTitleGuid.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articletitleguid.FieldID)
		for _, f := range fields {
			if !articletitleguid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != articletitleguid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atguo.mutation.TitleNormalized(); ok {
		_spec.SetField(articletitleguid.FieldTitleNormalized, field.TypeString, value)
	}
	if atguo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   articletitleguid.ArticleTable,
			Columns: []string{articletitleguid.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atguo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   articletitleguid.ArticleTable,
			Columns: []string{articletitleguid.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleTitleGuid{config: atguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articletitleguid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
