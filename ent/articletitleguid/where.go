// Code generated by ent, DO NOT EDIT.

package articletitleguid

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TitleNormalized applies equality check predicate on the "title_normalized" field. It's identical to TitleNormalizedEQ.
func TitleNormalized(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedEQ applies the EQ predicate on the "title_normalized" field.
func TitleNormalizedEQ(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedNEQ applies the NEQ predicate on the "title_normalized" field.
func TitleNormalizedNEQ(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedIn applies the In predicate on the "title_normalized" field.
func TitleNormalizedIn(vs ...string) predicate.ArticleTitleGuid {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitleNormalized), v...))
	})
}

// TitleNormalizedNotIn applies the NotIn predicate on the "title_normalized" field.
func TitleNormalizedNotIn(vs ...string) predicate.ArticleTitleGuid {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitleNormalized), v...))
	})
}

// TitleNormalizedGT applies the GT predicate on the "title_normalized" field.
func TitleNormalizedGT(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedGTE applies the GTE predicate on the "title_normalized" field.
func TitleNormalizedGTE(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedLT applies the LT predicate on the "title_normalized" field.
func TitleNormalizedLT(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedLTE applies the LTE predicate on the "title_normalized" field.
func TitleNormalizedLTE(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedContains applies the Contains predicate on the "title_normalized" field.
func TitleNormalizedContains(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedHasPrefix applies the HasPrefix predicate on the "title_normalized" field.
func TitleNormalizedHasPrefix(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedHasSuffix applies the HasSuffix predicate on the "title_normalized" field.
func TitleNormalizedHasSuffix(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedEqualFold applies the EqualFold predicate on the "title_normalized" field.
func TitleNormalizedEqualFold(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitleNormalized), v))
	})
}

// TitleNormalizedContainsFold applies the ContainsFold predicate on the "title_normalized" field.
func TitleNormalizedContainsFold(v string) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitleNormalized), v))
	})
}

// HasArticle applies the HasEdge predicate on the "article" edge.
func HasArticle() predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArticleTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ArticleTable, ArticleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArticleWith applies the HasEdge predicate on the "article" edge with a given conditions (other predicates).
func HasArticleWith(preds ...predicate.Article) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArticleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ArticleTable, ArticleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ArticleTitleGuid) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ArticleTitleGuid) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ArticleTitleGuid) predicate.ArticleTitleGuid {
	return predicate.ArticleTitleGuid(func(s *sql.Selector) {
		p(s.Not())
	})
}
