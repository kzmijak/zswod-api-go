// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeResetPasswordTokens holds the string denoting the resetpasswordtokens edge name in mutations.
	EdgeResetPasswordTokens = "resetPasswordTokens"
	// Table holds the table name of the user in the database.
	Table = "users"
	// RolesTable is the table that holds the roles relation/edge.
	RolesTable = "users"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "role_users"
	// ResetPasswordTokensTable is the table that holds the resetPasswordTokens relation/edge.
	ResetPasswordTokensTable = "reset_password_tokens"
	// ResetPasswordTokensInverseTable is the table name for the ResetPasswordToken entity.
	// It exists in this package in order to avoid circular dependency with the "resetpasswordtoken" package.
	ResetPasswordTokensInverseTable = "reset_password_tokens"
	// ResetPasswordTokensColumn is the table column denoting the resetPasswordTokens relation/edge.
	ResetPasswordTokensColumn = "user_reset_password_tokens"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldPassword,
	FieldEmail,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"role_users",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
