// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldFirstName holds the string denoting the firstname field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the lastname field in the database.
	FieldLastName = "last_name"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeGalleries holds the string denoting the galleries edge name in mutations.
	EdgeGalleries = "galleries"
	// EdgeArticles holds the string denoting the articles edge name in mutations.
	EdgeArticles = "articles"
	// EdgeAvatar holds the string denoting the avatar edge name in mutations.
	EdgeAvatar = "avatar"
	// EdgeResetPasswordTokens holds the string denoting the resetpasswordtokens edge name in mutations.
	EdgeResetPasswordTokens = "resetPasswordTokens"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GalleriesTable is the table that holds the galleries relation/edge.
	GalleriesTable = "galleries"
	// GalleriesInverseTable is the table name for the Gallery entity.
	// It exists in this package in order to avoid circular dependency with the "gallery" package.
	GalleriesInverseTable = "galleries"
	// GalleriesColumn is the table column denoting the galleries relation/edge.
	GalleriesColumn = "user_galleries"
	// ArticlesTable is the table that holds the articles relation/edge.
	ArticlesTable = "articles"
	// ArticlesInverseTable is the table name for the Article entity.
	// It exists in this package in order to avoid circular dependency with the "article" package.
	ArticlesInverseTable = "articles"
	// ArticlesColumn is the table column denoting the articles relation/edge.
	ArticlesColumn = "user_articles"
	// AvatarTable is the table that holds the avatar relation/edge.
	AvatarTable = "users"
	// AvatarInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	AvatarInverseTable = "images"
	// AvatarColumn is the table column denoting the avatar relation/edge.
	AvatarColumn = "user_avatar"
	// ResetPasswordTokensTable is the table that holds the resetPasswordTokens relation/edge.
	ResetPasswordTokensTable = "reset_password_tokens"
	// ResetPasswordTokensInverseTable is the table name for the ResetPasswordToken entity.
	// It exists in this package in order to avoid circular dependency with the "resetpasswordtoken" package.
	ResetPasswordTokensInverseTable = "reset_password_tokens"
	// ResetPasswordTokensColumn is the table column denoting the resetPasswordTokens relation/edge.
	ResetPasswordTokensColumn = "user_reset_password_tokens"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldPassword,
	FieldEmail,
	FieldFirstName,
	FieldLastName,
	FieldRole,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_avatar",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleAdmin         Role = "Admin"
	RoleTeacher       Role = "Teacher"
	RoleLegalGuardian Role = "LegalGuardian"
	RoleStudent       Role = "Student"
	RoleUnknown       Role = "Unknown"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleAdmin, RoleTeacher, RoleLegalGuardian, RoleStudent, RoleUnknown:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}
