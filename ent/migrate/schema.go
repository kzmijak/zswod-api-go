// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArticlesColumns holds the columns for the "articles" table.
	ArticlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString, Size: 200},
		{Name: "short", Type: field.TypeString, Size: 300},
		{Name: "content", Type: field.TypeString, SchemaType: map[string]string{"mysql": "mediumtext"}},
		{Name: "upload_date", Type: field.TypeTime},
		{Name: "gallery_article", Type: field.TypeUUID, Nullable: true},
	}
	// ArticlesTable holds the schema information for the "articles" table.
	ArticlesTable = &schema.Table{
		Name:       "articles",
		Columns:    ArticlesColumns,
		PrimaryKey: []*schema.Column{ArticlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "articles_galleries_article",
				Columns:    []*schema.Column{ArticlesColumns[5]},
				RefColumns: []*schema.Column{GalleriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ArticleTitleGuidsColumns holds the columns for the "article_title_guids" table.
	ArticleTitleGuidsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title_normalized", Type: field.TypeString, Unique: true},
		{Name: "article_title_normalized", Type: field.TypeUUID, Unique: true},
	}
	// ArticleTitleGuidsTable holds the schema information for the "article_title_guids" table.
	ArticleTitleGuidsTable = &schema.Table{
		Name:       "article_title_guids",
		Columns:    ArticleTitleGuidsColumns,
		PrimaryKey: []*schema.Column{ArticleTitleGuidsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "article_title_guids_articles_titleNormalized",
				Columns:    []*schema.Column{ArticleTitleGuidsColumns[2]},
				RefColumns: []*schema.Column{ArticlesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlobsColumns holds the columns for the "blobs" table.
	BlobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "blob", Type: field.TypeBytes, SchemaType: map[string]string{"mysql": "mediumblob"}},
		{Name: "title", Type: field.TypeString},
		{Name: "alt", Type: field.TypeString},
		{Name: "content_type", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// BlobsTable holds the schema information for the "blobs" table.
	BlobsTable = &schema.Table{
		Name:       "blobs",
		Columns:    BlobsColumns,
		PrimaryKey: []*schema.Column{BlobsColumns[0]},
	}
	// GalleriesColumns holds the columns for the "galleries" table.
	GalleriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// GalleriesTable holds the schema information for the "galleries" table.
	GalleriesTable = &schema.Table{
		Name:       "galleries",
		Columns:    GalleriesColumns,
		PrimaryKey: []*schema.Column{GalleriesColumns[0]},
	}
	// ImagesColumns holds the columns for the "images" table.
	ImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "alt", Type: field.TypeString},
		{Name: "is_preview", Type: field.TypeBool},
		{Name: "blob_article_images", Type: field.TypeUUID},
		{Name: "gallery_images", Type: field.TypeUUID, Nullable: true},
	}
	// ImagesTable holds the schema information for the "images" table.
	ImagesTable = &schema.Table{
		Name:       "images",
		Columns:    ImagesColumns,
		PrimaryKey: []*schema.Column{ImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "images_blobs_articleImages",
				Columns:    []*schema.Column{ImagesColumns[4]},
				RefColumns: []*schema.Column{BlobsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "images_galleries_images",
				Columns:    []*schema.Column{ImagesColumns[5]},
				RefColumns: []*schema.Column{GalleriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ResetPasswordTokensColumns holds the columns for the "reset_password_tokens" table.
	ResetPasswordTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_reset_password_tokens", Type: field.TypeUUID},
	}
	// ResetPasswordTokensTable holds the schema information for the "reset_password_tokens" table.
	ResetPasswordTokensTable = &schema.Table{
		Name:       "reset_password_tokens",
		Columns:    ResetPasswordTokensColumns,
		PrimaryKey: []*schema.Column{ResetPasswordTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reset_password_tokens_users_resetPasswordTokens",
				Columns:    []*schema.Column{ResetPasswordTokensColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"Admin", "Teacher", "LegalGuardian", "Student", "Unknown"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArticlesTable,
		ArticleTitleGuidsTable,
		BlobsTable,
		GalleriesTable,
		ImagesTable,
		ResetPasswordTokensTable,
		UsersTable,
	}
)

func init() {
	ArticlesTable.ForeignKeys[0].RefTable = GalleriesTable
	ArticleTitleGuidsTable.ForeignKeys[0].RefTable = ArticlesTable
	ImagesTable.ForeignKeys[0].RefTable = BlobsTable
	ImagesTable.ForeignKeys[1].RefTable = GalleriesTable
	ResetPasswordTokensTable.ForeignKeys[0].RefTable = UsersTable
}
