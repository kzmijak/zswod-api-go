// Code generated by ent, DO NOT EDIT.

package attachment

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the attachment type in the database.
	Label = "attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIconId holds the string denoting the iconid field in the database.
	FieldIconId = "icon_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeBlob holds the string denoting the blob edge name in mutations.
	EdgeBlob = "blob"
	// Table holds the table name of the attachment in the database.
	Table = "attachments"
	// BlobTable is the table that holds the blob relation/edge.
	BlobTable = "attachments"
	// BlobInverseTable is the table name for the Blob entity.
	// It exists in this package in order to avoid circular dependency with the "blob" package.
	BlobInverseTable = "blobs"
	// BlobColumn is the table column denoting the blob relation/edge.
	BlobColumn = "attachment_blob"
)

// Columns holds all SQL columns for attachment fields.
var Columns = []string{
	FieldID,
	FieldIconId,
	FieldTitle,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attachments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"article_attachments",
	"attachment_blob",
	"custom_page_attachments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
