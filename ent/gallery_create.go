// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/article"
	"github.com/kzmijak/zswod_api_go/ent/gallery"
	"github.com/kzmijak/zswod_api_go/ent/image"
	"github.com/kzmijak/zswod_api_go/ent/user"
)

// GalleryCreate is the builder for creating a Gallery entity.
type GalleryCreate struct {
	config
	mutation *GalleryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (gc *GalleryCreate) SetCreateTime(t time.Time) *GalleryCreate {
	gc.mutation.SetCreateTime(t)
	return gc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (gc *GalleryCreate) SetNillableCreateTime(t *time.Time) *GalleryCreate {
	if t != nil {
		gc.SetCreateTime(*t)
	}
	return gc
}

// SetUpdateTime sets the "update_time" field.
func (gc *GalleryCreate) SetUpdateTime(t time.Time) *GalleryCreate {
	gc.mutation.SetUpdateTime(t)
	return gc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (gc *GalleryCreate) SetNillableUpdateTime(t *time.Time) *GalleryCreate {
	if t != nil {
		gc.SetUpdateTime(*t)
	}
	return gc
}

// SetTitle sets the "title" field.
func (gc *GalleryCreate) SetTitle(s string) *GalleryCreate {
	gc.mutation.SetTitle(s)
	return gc
}

// SetID sets the "id" field.
func (gc *GalleryCreate) SetID(u uuid.UUID) *GalleryCreate {
	gc.mutation.SetID(u)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GalleryCreate) SetNillableID(u *uuid.UUID) *GalleryCreate {
	if u != nil {
		gc.SetID(*u)
	}
	return gc
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (gc *GalleryCreate) AddImageIDs(ids ...uuid.UUID) *GalleryCreate {
	gc.mutation.AddImageIDs(ids...)
	return gc
}

// AddImages adds the "images" edges to the Image entity.
func (gc *GalleryCreate) AddImages(i ...*Image) *GalleryCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gc.AddImageIDs(ids...)
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (gc *GalleryCreate) SetArticleID(id uuid.UUID) *GalleryCreate {
	gc.mutation.SetArticleID(id)
	return gc
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (gc *GalleryCreate) SetNillableArticleID(id *uuid.UUID) *GalleryCreate {
	if id != nil {
		gc = gc.SetArticleID(*id)
	}
	return gc
}

// SetArticle sets the "article" edge to the Article entity.
func (gc *GalleryCreate) SetArticle(a *Article) *GalleryCreate {
	return gc.SetArticleID(a.ID)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (gc *GalleryCreate) SetAuthorID(id uuid.UUID) *GalleryCreate {
	gc.mutation.SetAuthorID(id)
	return gc
}

// SetAuthor sets the "author" edge to the User entity.
func (gc *GalleryCreate) SetAuthor(u *User) *GalleryCreate {
	return gc.SetAuthorID(u.ID)
}

// Mutation returns the GalleryMutation object of the builder.
func (gc *GalleryCreate) Mutation() *GalleryMutation {
	return gc.mutation
}

// Save creates the Gallery in the database.
func (gc *GalleryCreate) Save(ctx context.Context) (*Gallery, error) {
	var (
		err  error
		node *Gallery
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GalleryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Gallery)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GalleryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GalleryCreate) SaveX(ctx context.Context) *Gallery {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GalleryCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GalleryCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GalleryCreate) defaults() {
	if _, ok := gc.mutation.CreateTime(); !ok {
		v := gallery.DefaultCreateTime()
		gc.mutation.SetCreateTime(v)
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		v := gallery.DefaultUpdateTime()
		gc.mutation.SetUpdateTime(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		v := gallery.DefaultID()
		gc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GalleryCreate) check() error {
	if _, ok := gc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Gallery.create_time"`)}
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Gallery.update_time"`)}
	}
	if _, ok := gc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Gallery.title"`)}
	}
	if len(gc.mutation.ImagesIDs()) == 0 {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required edge "Gallery.images"`)}
	}
	if _, ok := gc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "Gallery.author"`)}
	}
	return nil
}

func (gc *GalleryCreate) sqlSave(ctx context.Context) (*Gallery, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gc *GalleryCreate) createSpec() (*Gallery, *sqlgraph.CreateSpec) {
	var (
		_node = &Gallery{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gallery.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gallery.FieldID,
			},
		}
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gc.mutation.CreateTime(); ok {
		_spec.SetField(gallery.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := gc.mutation.UpdateTime(); ok {
		_spec.SetField(gallery.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := gc.mutation.Title(); ok {
		_spec.SetField(gallery.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := gc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gallery.ImagesTable,
			Columns: []string{gallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gallery.ArticleTable,
			Columns: []string{gallery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.article_gallery = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gallery.AuthorTable,
			Columns: []string{gallery.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_galleries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GalleryCreateBulk is the builder for creating many Gallery entities in bulk.
type GalleryCreateBulk struct {
	config
	builders []*GalleryCreate
}

// Save creates the Gallery entities in the database.
func (gcb *GalleryCreateBulk) Save(ctx context.Context) ([]*Gallery, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Gallery, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GalleryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GalleryCreateBulk) SaveX(ctx context.Context) []*Gallery {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GalleryCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GalleryCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
