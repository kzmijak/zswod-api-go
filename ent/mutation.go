// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/article"
	"github.com/kzmijak/zswod_api_go/ent/attachment"
	"github.com/kzmijak/zswod_api_go/ent/blob"
	"github.com/kzmijak/zswod_api_go/ent/custompage"
	"github.com/kzmijak/zswod_api_go/ent/gallery"
	"github.com/kzmijak/zswod_api_go/ent/image"
	"github.com/kzmijak/zswod_api_go/ent/predicate"
	"github.com/kzmijak/zswod_api_go/ent/resetpasswordtoken"
	"github.com/kzmijak/zswod_api_go/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle            = "Article"
	TypeAttachment         = "Attachment"
	TypeBlob               = "Blob"
	TypeCustomPage         = "CustomPage"
	TypeGallery            = "Gallery"
	TypeImage              = "Image"
	TypeResetPasswordToken = "ResetPasswordToken"
	TypeUser               = "User"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	create_time        *time.Time
	update_time        *time.Time
	title              *string
	titleNormalized    *string
	short              *string
	content            *string
	clearedFields      map[string]struct{}
	gallery            *uuid.UUID
	clearedgallery     bool
	author             map[uuid.UUID]struct{}
	removedauthor      map[uuid.UUID]struct{}
	clearedauthor      bool
	attachments        map[uuid.UUID]struct{}
	removedattachments map[uuid.UUID]struct{}
	clearedattachments bool
	done               bool
	oldValue           func(context.Context) (*Article, error)
	predicates         []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id uuid.UUID) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Article entities.
func (m *ArticleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ArticleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ArticleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ArticleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ArticleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ArticleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ArticleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *ArticleMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ArticleMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ArticleMutation) ResetTitle() {
	m.title = nil
}

// SetTitleNormalized sets the "titleNormalized" field.
func (m *ArticleMutation) SetTitleNormalized(s string) {
	m.titleNormalized = &s
}

// TitleNormalized returns the value of the "titleNormalized" field in the mutation.
func (m *ArticleMutation) TitleNormalized() (r string, exists bool) {
	v := m.titleNormalized
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleNormalized returns the old "titleNormalized" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitleNormalized(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleNormalized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleNormalized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleNormalized: %w", err)
	}
	return oldValue.TitleNormalized, nil
}

// ResetTitleNormalized resets all changes to the "titleNormalized" field.
func (m *ArticleMutation) ResetTitleNormalized() {
	m.titleNormalized = nil
}

// SetShort sets the "short" field.
func (m *ArticleMutation) SetShort(s string) {
	m.short = &s
}

// Short returns the value of the "short" field in the mutation.
func (m *ArticleMutation) Short() (r string, exists bool) {
	v := m.short
	if v == nil {
		return
	}
	return *v, true
}

// OldShort returns the old "short" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldShort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShort: %w", err)
	}
	return oldValue.Short, nil
}

// ResetShort resets all changes to the "short" field.
func (m *ArticleMutation) ResetShort() {
	m.short = nil
}

// SetContent sets the "content" field.
func (m *ArticleMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ArticleMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ArticleMutation) ResetContent() {
	m.content = nil
}

// SetGalleryID sets the "gallery" edge to the Gallery entity by id.
func (m *ArticleMutation) SetGalleryID(id uuid.UUID) {
	m.gallery = &id
}

// ClearGallery clears the "gallery" edge to the Gallery entity.
func (m *ArticleMutation) ClearGallery() {
	m.clearedgallery = true
}

// GalleryCleared reports if the "gallery" edge to the Gallery entity was cleared.
func (m *ArticleMutation) GalleryCleared() bool {
	return m.clearedgallery
}

// GalleryID returns the "gallery" edge ID in the mutation.
func (m *ArticleMutation) GalleryID() (id uuid.UUID, exists bool) {
	if m.gallery != nil {
		return *m.gallery, true
	}
	return
}

// GalleryIDs returns the "gallery" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GalleryID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) GalleryIDs() (ids []uuid.UUID) {
	if id := m.gallery; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGallery resets all changes to the "gallery" edge.
func (m *ArticleMutation) ResetGallery() {
	m.gallery = nil
	m.clearedgallery = false
}

// AddAuthorIDs adds the "author" edge to the User entity by ids.
func (m *ArticleMutation) AddAuthorIDs(ids ...uuid.UUID) {
	if m.author == nil {
		m.author = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.author[ids[i]] = struct{}{}
	}
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *ArticleMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *ArticleMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// RemoveAuthorIDs removes the "author" edge to the User entity by IDs.
func (m *ArticleMutation) RemoveAuthorIDs(ids ...uuid.UUID) {
	if m.removedauthor == nil {
		m.removedauthor = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.author, ids[i])
		m.removedauthor[ids[i]] = struct{}{}
	}
}

// RemovedAuthor returns the removed IDs of the "author" edge to the User entity.
func (m *ArticleMutation) RemovedAuthorIDs() (ids []uuid.UUID) {
	for id := range m.removedauthor {
		ids = append(ids, id)
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
func (m *ArticleMutation) AuthorIDs() (ids []uuid.UUID) {
	for id := range m.author {
		ids = append(ids, id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *ArticleMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
	m.removedauthor = nil
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by ids.
func (m *ArticleMutation) AddAttachmentIDs(ids ...uuid.UUID) {
	if m.attachments == nil {
		m.attachments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.attachments[ids[i]] = struct{}{}
	}
}

// ClearAttachments clears the "attachments" edge to the Attachment entity.
func (m *ArticleMutation) ClearAttachments() {
	m.clearedattachments = true
}

// AttachmentsCleared reports if the "attachments" edge to the Attachment entity was cleared.
func (m *ArticleMutation) AttachmentsCleared() bool {
	return m.clearedattachments
}

// RemoveAttachmentIDs removes the "attachments" edge to the Attachment entity by IDs.
func (m *ArticleMutation) RemoveAttachmentIDs(ids ...uuid.UUID) {
	if m.removedattachments == nil {
		m.removedattachments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.attachments, ids[i])
		m.removedattachments[ids[i]] = struct{}{}
	}
}

// RemovedAttachments returns the removed IDs of the "attachments" edge to the Attachment entity.
func (m *ArticleMutation) RemovedAttachmentsIDs() (ids []uuid.UUID) {
	for id := range m.removedattachments {
		ids = append(ids, id)
	}
	return
}

// AttachmentsIDs returns the "attachments" edge IDs in the mutation.
func (m *ArticleMutation) AttachmentsIDs() (ids []uuid.UUID) {
	for id := range m.attachments {
		ids = append(ids, id)
	}
	return
}

// ResetAttachments resets all changes to the "attachments" edge.
func (m *ArticleMutation) ResetAttachments() {
	m.attachments = nil
	m.clearedattachments = false
	m.removedattachments = nil
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, article.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, article.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, article.FieldTitle)
	}
	if m.titleNormalized != nil {
		fields = append(fields, article.FieldTitleNormalized)
	}
	if m.short != nil {
		fields = append(fields, article.FieldShort)
	}
	if m.content != nil {
		fields = append(fields, article.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldCreateTime:
		return m.CreateTime()
	case article.FieldUpdateTime:
		return m.UpdateTime()
	case article.FieldTitle:
		return m.Title()
	case article.FieldTitleNormalized:
		return m.TitleNormalized()
	case article.FieldShort:
		return m.Short()
	case article.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case article.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case article.FieldTitle:
		return m.OldTitle(ctx)
	case article.FieldTitleNormalized:
		return m.OldTitleNormalized(ctx)
	case article.FieldShort:
		return m.OldShort(ctx)
	case article.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case article.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case article.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case article.FieldTitleNormalized:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleNormalized(v)
		return nil
	case article.FieldShort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShort(v)
		return nil
	case article.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case article.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case article.FieldTitle:
		m.ResetTitle()
		return nil
	case article.FieldTitleNormalized:
		m.ResetTitleNormalized()
		return nil
	case article.FieldShort:
		m.ResetShort()
		return nil
	case article.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.gallery != nil {
		edges = append(edges, article.EdgeGallery)
	}
	if m.author != nil {
		edges = append(edges, article.EdgeAuthor)
	}
	if m.attachments != nil {
		edges = append(edges, article.EdgeAttachments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeGallery:
		if id := m.gallery; id != nil {
			return []ent.Value{*id}
		}
	case article.EdgeAuthor:
		ids := make([]ent.Value, 0, len(m.author))
		for id := range m.author {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.attachments))
		for id := range m.attachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedauthor != nil {
		edges = append(edges, article.EdgeAuthor)
	}
	if m.removedattachments != nil {
		edges = append(edges, article.EdgeAttachments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeAuthor:
		ids := make([]ent.Value, 0, len(m.removedauthor))
		for id := range m.removedauthor {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.removedattachments))
		for id := range m.removedattachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgallery {
		edges = append(edges, article.EdgeGallery)
	}
	if m.clearedauthor {
		edges = append(edges, article.EdgeAuthor)
	}
	if m.clearedattachments {
		edges = append(edges, article.EdgeAttachments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case article.EdgeGallery:
		return m.clearedgallery
	case article.EdgeAuthor:
		return m.clearedauthor
	case article.EdgeAttachments:
		return m.clearedattachments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	switch name {
	case article.EdgeGallery:
		m.ClearGallery()
		return nil
	}
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	switch name {
	case article.EdgeGallery:
		m.ResetGallery()
		return nil
	case article.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case article.EdgeAttachments:
		m.ResetAttachments()
		return nil
	}
	return fmt.Errorf("unknown Article edge %s", name)
}

// AttachmentMutation represents an operation that mutates the Attachment nodes in the graph.
type AttachmentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	iconId        *string
	title         *string
	description   *string
	clearedFields map[string]struct{}
	blob          *uuid.UUID
	clearedblob   bool
	done          bool
	oldValue      func(context.Context) (*Attachment, error)
	predicates    []predicate.Attachment
}

var _ ent.Mutation = (*AttachmentMutation)(nil)

// attachmentOption allows management of the mutation configuration using functional options.
type attachmentOption func(*AttachmentMutation)

// newAttachmentMutation creates new mutation for the Attachment entity.
func newAttachmentMutation(c config, op Op, opts ...attachmentOption) *AttachmentMutation {
	m := &AttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttachmentID sets the ID field of the mutation.
func withAttachmentID(id uuid.UUID) attachmentOption {
	return func(m *AttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Attachment
		)
		m.oldValue = func(ctx context.Context) (*Attachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttachment sets the old Attachment of the mutation.
func withAttachment(node *Attachment) attachmentOption {
	return func(m *AttachmentMutation) {
		m.oldValue = func(context.Context) (*Attachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Attachment entities.
func (m *AttachmentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttachmentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttachmentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIconId sets the "iconId" field.
func (m *AttachmentMutation) SetIconId(s string) {
	m.iconId = &s
}

// IconId returns the value of the "iconId" field in the mutation.
func (m *AttachmentMutation) IconId() (r string, exists bool) {
	v := m.iconId
	if v == nil {
		return
	}
	return *v, true
}

// OldIconId returns the old "iconId" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldIconId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIconId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIconId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconId: %w", err)
	}
	return oldValue.IconId, nil
}

// ClearIconId clears the value of the "iconId" field.
func (m *AttachmentMutation) ClearIconId() {
	m.iconId = nil
	m.clearedFields[attachment.FieldIconId] = struct{}{}
}

// IconIdCleared returns if the "iconId" field was cleared in this mutation.
func (m *AttachmentMutation) IconIdCleared() bool {
	_, ok := m.clearedFields[attachment.FieldIconId]
	return ok
}

// ResetIconId resets all changes to the "iconId" field.
func (m *AttachmentMutation) ResetIconId() {
	m.iconId = nil
	delete(m.clearedFields, attachment.FieldIconId)
}

// SetTitle sets the "title" field.
func (m *AttachmentMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AttachmentMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AttachmentMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *AttachmentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AttachmentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AttachmentMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[attachment.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AttachmentMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[attachment.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AttachmentMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, attachment.FieldDescription)
}

// SetBlobID sets the "blob" edge to the Blob entity by id.
func (m *AttachmentMutation) SetBlobID(id uuid.UUID) {
	m.blob = &id
}

// ClearBlob clears the "blob" edge to the Blob entity.
func (m *AttachmentMutation) ClearBlob() {
	m.clearedblob = true
}

// BlobCleared reports if the "blob" edge to the Blob entity was cleared.
func (m *AttachmentMutation) BlobCleared() bool {
	return m.clearedblob
}

// BlobID returns the "blob" edge ID in the mutation.
func (m *AttachmentMutation) BlobID() (id uuid.UUID, exists bool) {
	if m.blob != nil {
		return *m.blob, true
	}
	return
}

// BlobIDs returns the "blob" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlobID instead. It exists only for internal usage by the builders.
func (m *AttachmentMutation) BlobIDs() (ids []uuid.UUID) {
	if id := m.blob; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlob resets all changes to the "blob" edge.
func (m *AttachmentMutation) ResetBlob() {
	m.blob = nil
	m.clearedblob = false
}

// Where appends a list predicates to the AttachmentMutation builder.
func (m *AttachmentMutation) Where(ps ...predicate.Attachment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttachmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Attachment).
func (m *AttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttachmentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.iconId != nil {
		fields = append(fields, attachment.FieldIconId)
	}
	if m.title != nil {
		fields = append(fields, attachment.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, attachment.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldIconId:
		return m.IconId()
	case attachment.FieldTitle:
		return m.Title()
	case attachment.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attachment.FieldIconId:
		return m.OldIconId(ctx)
	case attachment.FieldTitle:
		return m.OldTitle(ctx)
	case attachment.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Attachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldIconId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconId(v)
		return nil
	case attachment.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case attachment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttachmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttachmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttachmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attachment.FieldIconId) {
		fields = append(fields, attachment.FieldIconId)
	}
	if m.FieldCleared(attachment.FieldDescription) {
		fields = append(fields, attachment.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttachmentMutation) ClearField(name string) error {
	switch name {
	case attachment.FieldIconId:
		m.ClearIconId()
		return nil
	case attachment.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Attachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttachmentMutation) ResetField(name string) error {
	switch name {
	case attachment.FieldIconId:
		m.ResetIconId()
		return nil
	case attachment.FieldTitle:
		m.ResetTitle()
		return nil
	case attachment.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.blob != nil {
		edges = append(edges, attachment.EdgeBlob)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttachmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attachment.EdgeBlob:
		if id := m.blob; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttachmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedblob {
		edges = append(edges, attachment.EdgeBlob)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttachmentMutation) EdgeCleared(name string) bool {
	switch name {
	case attachment.EdgeBlob:
		return m.clearedblob
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttachmentMutation) ClearEdge(name string) error {
	switch name {
	case attachment.EdgeBlob:
		m.ClearBlob()
		return nil
	}
	return fmt.Errorf("unknown Attachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttachmentMutation) ResetEdge(name string) error {
	switch name {
	case attachment.EdgeBlob:
		m.ResetBlob()
		return nil
	}
	return fmt.Errorf("unknown Attachment edge %s", name)
}

// BlobMutation represents an operation that mutates the Blob nodes in the graph.
type BlobMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	blob          *[]byte
	title         *string
	alt           *string
	contentType   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Blob, error)
	predicates    []predicate.Blob
}

var _ ent.Mutation = (*BlobMutation)(nil)

// blobOption allows management of the mutation configuration using functional options.
type blobOption func(*BlobMutation)

// newBlobMutation creates new mutation for the Blob entity.
func newBlobMutation(c config, op Op, opts ...blobOption) *BlobMutation {
	m := &BlobMutation{
		config:        c,
		op:            op,
		typ:           TypeBlob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlobID sets the ID field of the mutation.
func withBlobID(id uuid.UUID) blobOption {
	return func(m *BlobMutation) {
		var (
			err   error
			once  sync.Once
			value *Blob
		)
		m.oldValue = func(ctx context.Context) (*Blob, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Blob.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlob sets the old Blob of the mutation.
func withBlob(node *Blob) blobOption {
	return func(m *BlobMutation) {
		m.oldValue = func(context.Context) (*Blob, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Blob entities.
func (m *BlobMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlobMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlobMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Blob.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *BlobMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BlobMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Blob entity.
// If the Blob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BlobMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetBlob sets the "blob" field.
func (m *BlobMutation) SetBlob(b []byte) {
	m.blob = &b
}

// Blob returns the value of the "blob" field in the mutation.
func (m *BlobMutation) Blob() (r []byte, exists bool) {
	v := m.blob
	if v == nil {
		return
	}
	return *v, true
}

// OldBlob returns the old "blob" field's value of the Blob entity.
// If the Blob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobMutation) OldBlob(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlob is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlob requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlob: %w", err)
	}
	return oldValue.Blob, nil
}

// ResetBlob resets all changes to the "blob" field.
func (m *BlobMutation) ResetBlob() {
	m.blob = nil
}

// SetTitle sets the "title" field.
func (m *BlobMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *BlobMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Blob entity.
// If the Blob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *BlobMutation) ResetTitle() {
	m.title = nil
}

// SetAlt sets the "alt" field.
func (m *BlobMutation) SetAlt(s string) {
	m.alt = &s
}

// Alt returns the value of the "alt" field in the mutation.
func (m *BlobMutation) Alt() (r string, exists bool) {
	v := m.alt
	if v == nil {
		return
	}
	return *v, true
}

// OldAlt returns the old "alt" field's value of the Blob entity.
// If the Blob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobMutation) OldAlt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlt: %w", err)
	}
	return oldValue.Alt, nil
}

// ResetAlt resets all changes to the "alt" field.
func (m *BlobMutation) ResetAlt() {
	m.alt = nil
}

// SetContentType sets the "contentType" field.
func (m *BlobMutation) SetContentType(s string) {
	m.contentType = &s
}

// ContentType returns the value of the "contentType" field in the mutation.
func (m *BlobMutation) ContentType() (r string, exists bool) {
	v := m.contentType
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "contentType" field's value of the Blob entity.
// If the Blob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "contentType" field.
func (m *BlobMutation) ResetContentType() {
	m.contentType = nil
}

// Where appends a list predicates to the BlobMutation builder.
func (m *BlobMutation) Where(ps ...predicate.Blob) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BlobMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Blob).
func (m *BlobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlobMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, blob.FieldCreateTime)
	}
	if m.blob != nil {
		fields = append(fields, blob.FieldBlob)
	}
	if m.title != nil {
		fields = append(fields, blob.FieldTitle)
	}
	if m.alt != nil {
		fields = append(fields, blob.FieldAlt)
	}
	if m.contentType != nil {
		fields = append(fields, blob.FieldContentType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blob.FieldCreateTime:
		return m.CreateTime()
	case blob.FieldBlob:
		return m.Blob()
	case blob.FieldTitle:
		return m.Title()
	case blob.FieldAlt:
		return m.Alt()
	case blob.FieldContentType:
		return m.ContentType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blob.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case blob.FieldBlob:
		return m.OldBlob(ctx)
	case blob.FieldTitle:
		return m.OldTitle(ctx)
	case blob.FieldAlt:
		return m.OldAlt(ctx)
	case blob.FieldContentType:
		return m.OldContentType(ctx)
	}
	return nil, fmt.Errorf("unknown Blob field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blob.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case blob.FieldBlob:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlob(v)
		return nil
	case blob.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case blob.FieldAlt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlt(v)
		return nil
	case blob.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	}
	return fmt.Errorf("unknown Blob field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlobMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlobMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlobMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Blob numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlobMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlobMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Blob nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlobMutation) ResetField(name string) error {
	switch name {
	case blob.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case blob.FieldBlob:
		m.ResetBlob()
		return nil
	case blob.FieldTitle:
		m.ResetTitle()
		return nil
	case blob.FieldAlt:
		m.ResetAlt()
		return nil
	case blob.FieldContentType:
		m.ResetContentType()
		return nil
	}
	return fmt.Errorf("unknown Blob field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlobMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlobMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlobMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlobMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlobMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Blob unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlobMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Blob edge %s", name)
}

// CustomPageMutation represents an operation that mutates the CustomPage nodes in the graph.
type CustomPageMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	iconId             *string
	update_time        *time.Time
	_order             *int
	add_order          *int
	title              *string
	titleNormalized    *string
	content            *string
	isExternal         *bool
	link               *string
	section            *string
	clearedFields      map[string]struct{}
	attachments        map[uuid.UUID]struct{}
	removedattachments map[uuid.UUID]struct{}
	clearedattachments bool
	done               bool
	oldValue           func(context.Context) (*CustomPage, error)
	predicates         []predicate.CustomPage
}

var _ ent.Mutation = (*CustomPageMutation)(nil)

// custompageOption allows management of the mutation configuration using functional options.
type custompageOption func(*CustomPageMutation)

// newCustomPageMutation creates new mutation for the CustomPage entity.
func newCustomPageMutation(c config, op Op, opts ...custompageOption) *CustomPageMutation {
	m := &CustomPageMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomPage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomPageID sets the ID field of the mutation.
func withCustomPageID(id uuid.UUID) custompageOption {
	return func(m *CustomPageMutation) {
		var (
			err   error
			once  sync.Once
			value *CustomPage
		)
		m.oldValue = func(ctx context.Context) (*CustomPage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CustomPage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomPage sets the old CustomPage of the mutation.
func withCustomPage(node *CustomPage) custompageOption {
	return func(m *CustomPageMutation) {
		m.oldValue = func(context.Context) (*CustomPage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomPageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomPageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CustomPage entities.
func (m *CustomPageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomPageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomPageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CustomPage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIconId sets the "iconId" field.
func (m *CustomPageMutation) SetIconId(s string) {
	m.iconId = &s
}

// IconId returns the value of the "iconId" field in the mutation.
func (m *CustomPageMutation) IconId() (r string, exists bool) {
	v := m.iconId
	if v == nil {
		return
	}
	return *v, true
}

// OldIconId returns the old "iconId" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldIconId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIconId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIconId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconId: %w", err)
	}
	return oldValue.IconId, nil
}

// ClearIconId clears the value of the "iconId" field.
func (m *CustomPageMutation) ClearIconId() {
	m.iconId = nil
	m.clearedFields[custompage.FieldIconId] = struct{}{}
}

// IconIdCleared returns if the "iconId" field was cleared in this mutation.
func (m *CustomPageMutation) IconIdCleared() bool {
	_, ok := m.clearedFields[custompage.FieldIconId]
	return ok
}

// ResetIconId resets all changes to the "iconId" field.
func (m *CustomPageMutation) ResetIconId() {
	m.iconId = nil
	delete(m.clearedFields, custompage.FieldIconId)
}

// SetUpdateTime sets the "update_time" field.
func (m *CustomPageMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *CustomPageMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *CustomPageMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetOrder sets the "order" field.
func (m *CustomPageMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *CustomPageMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *CustomPageMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *CustomPageMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *CustomPageMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetTitle sets the "title" field.
func (m *CustomPageMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *CustomPageMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *CustomPageMutation) ResetTitle() {
	m.title = nil
}

// SetTitleNormalized sets the "titleNormalized" field.
func (m *CustomPageMutation) SetTitleNormalized(s string) {
	m.titleNormalized = &s
}

// TitleNormalized returns the value of the "titleNormalized" field in the mutation.
func (m *CustomPageMutation) TitleNormalized() (r string, exists bool) {
	v := m.titleNormalized
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleNormalized returns the old "titleNormalized" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldTitleNormalized(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleNormalized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleNormalized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleNormalized: %w", err)
	}
	return oldValue.TitleNormalized, nil
}

// ResetTitleNormalized resets all changes to the "titleNormalized" field.
func (m *CustomPageMutation) ResetTitleNormalized() {
	m.titleNormalized = nil
}

// SetContent sets the "content" field.
func (m *CustomPageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *CustomPageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *CustomPageMutation) ResetContent() {
	m.content = nil
}

// SetIsExternal sets the "isExternal" field.
func (m *CustomPageMutation) SetIsExternal(b bool) {
	m.isExternal = &b
}

// IsExternal returns the value of the "isExternal" field in the mutation.
func (m *CustomPageMutation) IsExternal() (r bool, exists bool) {
	v := m.isExternal
	if v == nil {
		return
	}
	return *v, true
}

// OldIsExternal returns the old "isExternal" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldIsExternal(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsExternal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsExternal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsExternal: %w", err)
	}
	return oldValue.IsExternal, nil
}

// ClearIsExternal clears the value of the "isExternal" field.
func (m *CustomPageMutation) ClearIsExternal() {
	m.isExternal = nil
	m.clearedFields[custompage.FieldIsExternal] = struct{}{}
}

// IsExternalCleared returns if the "isExternal" field was cleared in this mutation.
func (m *CustomPageMutation) IsExternalCleared() bool {
	_, ok := m.clearedFields[custompage.FieldIsExternal]
	return ok
}

// ResetIsExternal resets all changes to the "isExternal" field.
func (m *CustomPageMutation) ResetIsExternal() {
	m.isExternal = nil
	delete(m.clearedFields, custompage.FieldIsExternal)
}

// SetLink sets the "link" field.
func (m *CustomPageMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *CustomPageMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *CustomPageMutation) ClearLink() {
	m.link = nil
	m.clearedFields[custompage.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *CustomPageMutation) LinkCleared() bool {
	_, ok := m.clearedFields[custompage.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *CustomPageMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, custompage.FieldLink)
}

// SetSection sets the "section" field.
func (m *CustomPageMutation) SetSection(s string) {
	m.section = &s
}

// Section returns the value of the "section" field in the mutation.
func (m *CustomPageMutation) Section() (r string, exists bool) {
	v := m.section
	if v == nil {
		return
	}
	return *v, true
}

// OldSection returns the old "section" field's value of the CustomPage entity.
// If the CustomPage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomPageMutation) OldSection(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSection: %w", err)
	}
	return oldValue.Section, nil
}

// ResetSection resets all changes to the "section" field.
func (m *CustomPageMutation) ResetSection() {
	m.section = nil
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by ids.
func (m *CustomPageMutation) AddAttachmentIDs(ids ...uuid.UUID) {
	if m.attachments == nil {
		m.attachments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.attachments[ids[i]] = struct{}{}
	}
}

// ClearAttachments clears the "attachments" edge to the Attachment entity.
func (m *CustomPageMutation) ClearAttachments() {
	m.clearedattachments = true
}

// AttachmentsCleared reports if the "attachments" edge to the Attachment entity was cleared.
func (m *CustomPageMutation) AttachmentsCleared() bool {
	return m.clearedattachments
}

// RemoveAttachmentIDs removes the "attachments" edge to the Attachment entity by IDs.
func (m *CustomPageMutation) RemoveAttachmentIDs(ids ...uuid.UUID) {
	if m.removedattachments == nil {
		m.removedattachments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.attachments, ids[i])
		m.removedattachments[ids[i]] = struct{}{}
	}
}

// RemovedAttachments returns the removed IDs of the "attachments" edge to the Attachment entity.
func (m *CustomPageMutation) RemovedAttachmentsIDs() (ids []uuid.UUID) {
	for id := range m.removedattachments {
		ids = append(ids, id)
	}
	return
}

// AttachmentsIDs returns the "attachments" edge IDs in the mutation.
func (m *CustomPageMutation) AttachmentsIDs() (ids []uuid.UUID) {
	for id := range m.attachments {
		ids = append(ids, id)
	}
	return
}

// ResetAttachments resets all changes to the "attachments" edge.
func (m *CustomPageMutation) ResetAttachments() {
	m.attachments = nil
	m.clearedattachments = false
	m.removedattachments = nil
}

// Where appends a list predicates to the CustomPageMutation builder.
func (m *CustomPageMutation) Where(ps ...predicate.CustomPage) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CustomPageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CustomPage).
func (m *CustomPageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomPageMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.iconId != nil {
		fields = append(fields, custompage.FieldIconId)
	}
	if m.update_time != nil {
		fields = append(fields, custompage.FieldUpdateTime)
	}
	if m._order != nil {
		fields = append(fields, custompage.FieldOrder)
	}
	if m.title != nil {
		fields = append(fields, custompage.FieldTitle)
	}
	if m.titleNormalized != nil {
		fields = append(fields, custompage.FieldTitleNormalized)
	}
	if m.content != nil {
		fields = append(fields, custompage.FieldContent)
	}
	if m.isExternal != nil {
		fields = append(fields, custompage.FieldIsExternal)
	}
	if m.link != nil {
		fields = append(fields, custompage.FieldLink)
	}
	if m.section != nil {
		fields = append(fields, custompage.FieldSection)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomPageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case custompage.FieldIconId:
		return m.IconId()
	case custompage.FieldUpdateTime:
		return m.UpdateTime()
	case custompage.FieldOrder:
		return m.Order()
	case custompage.FieldTitle:
		return m.Title()
	case custompage.FieldTitleNormalized:
		return m.TitleNormalized()
	case custompage.FieldContent:
		return m.Content()
	case custompage.FieldIsExternal:
		return m.IsExternal()
	case custompage.FieldLink:
		return m.Link()
	case custompage.FieldSection:
		return m.Section()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomPageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case custompage.FieldIconId:
		return m.OldIconId(ctx)
	case custompage.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case custompage.FieldOrder:
		return m.OldOrder(ctx)
	case custompage.FieldTitle:
		return m.OldTitle(ctx)
	case custompage.FieldTitleNormalized:
		return m.OldTitleNormalized(ctx)
	case custompage.FieldContent:
		return m.OldContent(ctx)
	case custompage.FieldIsExternal:
		return m.OldIsExternal(ctx)
	case custompage.FieldLink:
		return m.OldLink(ctx)
	case custompage.FieldSection:
		return m.OldSection(ctx)
	}
	return nil, fmt.Errorf("unknown CustomPage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomPageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case custompage.FieldIconId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconId(v)
		return nil
	case custompage.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case custompage.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case custompage.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case custompage.FieldTitleNormalized:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleNormalized(v)
		return nil
	case custompage.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case custompage.FieldIsExternal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsExternal(v)
		return nil
	case custompage.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case custompage.FieldSection:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSection(v)
		return nil
	}
	return fmt.Errorf("unknown CustomPage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomPageMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, custompage.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomPageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case custompage.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomPageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case custompage.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown CustomPage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomPageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(custompage.FieldIconId) {
		fields = append(fields, custompage.FieldIconId)
	}
	if m.FieldCleared(custompage.FieldIsExternal) {
		fields = append(fields, custompage.FieldIsExternal)
	}
	if m.FieldCleared(custompage.FieldLink) {
		fields = append(fields, custompage.FieldLink)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomPageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomPageMutation) ClearField(name string) error {
	switch name {
	case custompage.FieldIconId:
		m.ClearIconId()
		return nil
	case custompage.FieldIsExternal:
		m.ClearIsExternal()
		return nil
	case custompage.FieldLink:
		m.ClearLink()
		return nil
	}
	return fmt.Errorf("unknown CustomPage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomPageMutation) ResetField(name string) error {
	switch name {
	case custompage.FieldIconId:
		m.ResetIconId()
		return nil
	case custompage.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case custompage.FieldOrder:
		m.ResetOrder()
		return nil
	case custompage.FieldTitle:
		m.ResetTitle()
		return nil
	case custompage.FieldTitleNormalized:
		m.ResetTitleNormalized()
		return nil
	case custompage.FieldContent:
		m.ResetContent()
		return nil
	case custompage.FieldIsExternal:
		m.ResetIsExternal()
		return nil
	case custompage.FieldLink:
		m.ResetLink()
		return nil
	case custompage.FieldSection:
		m.ResetSection()
		return nil
	}
	return fmt.Errorf("unknown CustomPage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomPageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attachments != nil {
		edges = append(edges, custompage.EdgeAttachments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomPageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case custompage.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.attachments))
		for id := range m.attachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomPageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedattachments != nil {
		edges = append(edges, custompage.EdgeAttachments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomPageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case custompage.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.removedattachments))
		for id := range m.removedattachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomPageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattachments {
		edges = append(edges, custompage.EdgeAttachments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomPageMutation) EdgeCleared(name string) bool {
	switch name {
	case custompage.EdgeAttachments:
		return m.clearedattachments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomPageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CustomPage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomPageMutation) ResetEdge(name string) error {
	switch name {
	case custompage.EdgeAttachments:
		m.ResetAttachments()
		return nil
	}
	return fmt.Errorf("unknown CustomPage edge %s", name)
}

// GalleryMutation represents an operation that mutates the Gallery nodes in the graph.
type GalleryMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	create_time    *time.Time
	update_time    *time.Time
	title          *string
	clearedFields  map[string]struct{}
	images         map[uuid.UUID]struct{}
	removedimages  map[uuid.UUID]struct{}
	clearedimages  bool
	article        *uuid.UUID
	clearedarticle bool
	author         *uuid.UUID
	clearedauthor  bool
	done           bool
	oldValue       func(context.Context) (*Gallery, error)
	predicates     []predicate.Gallery
}

var _ ent.Mutation = (*GalleryMutation)(nil)

// galleryOption allows management of the mutation configuration using functional options.
type galleryOption func(*GalleryMutation)

// newGalleryMutation creates new mutation for the Gallery entity.
func newGalleryMutation(c config, op Op, opts ...galleryOption) *GalleryMutation {
	m := &GalleryMutation{
		config:        c,
		op:            op,
		typ:           TypeGallery,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGalleryID sets the ID field of the mutation.
func withGalleryID(id uuid.UUID) galleryOption {
	return func(m *GalleryMutation) {
		var (
			err   error
			once  sync.Once
			value *Gallery
		)
		m.oldValue = func(ctx context.Context) (*Gallery, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gallery.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGallery sets the old Gallery of the mutation.
func withGallery(node *Gallery) galleryOption {
	return func(m *GalleryMutation) {
		m.oldValue = func(context.Context) (*Gallery, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GalleryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GalleryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Gallery entities.
func (m *GalleryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GalleryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GalleryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Gallery.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GalleryMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GalleryMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Gallery entity.
// If the Gallery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GalleryMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GalleryMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GalleryMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GalleryMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Gallery entity.
// If the Gallery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GalleryMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GalleryMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *GalleryMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *GalleryMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Gallery entity.
// If the Gallery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GalleryMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *GalleryMutation) ResetTitle() {
	m.title = nil
}

// AddImageIDs adds the "images" edge to the Image entity by ids.
func (m *GalleryMutation) AddImageIDs(ids ...uuid.UUID) {
	if m.images == nil {
		m.images = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.images[ids[i]] = struct{}{}
	}
}

// ClearImages clears the "images" edge to the Image entity.
func (m *GalleryMutation) ClearImages() {
	m.clearedimages = true
}

// ImagesCleared reports if the "images" edge to the Image entity was cleared.
func (m *GalleryMutation) ImagesCleared() bool {
	return m.clearedimages
}

// RemoveImageIDs removes the "images" edge to the Image entity by IDs.
func (m *GalleryMutation) RemoveImageIDs(ids ...uuid.UUID) {
	if m.removedimages == nil {
		m.removedimages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.images, ids[i])
		m.removedimages[ids[i]] = struct{}{}
	}
}

// RemovedImages returns the removed IDs of the "images" edge to the Image entity.
func (m *GalleryMutation) RemovedImagesIDs() (ids []uuid.UUID) {
	for id := range m.removedimages {
		ids = append(ids, id)
	}
	return
}

// ImagesIDs returns the "images" edge IDs in the mutation.
func (m *GalleryMutation) ImagesIDs() (ids []uuid.UUID) {
	for id := range m.images {
		ids = append(ids, id)
	}
	return
}

// ResetImages resets all changes to the "images" edge.
func (m *GalleryMutation) ResetImages() {
	m.images = nil
	m.clearedimages = false
	m.removedimages = nil
}

// SetArticleID sets the "article" edge to the Article entity by id.
func (m *GalleryMutation) SetArticleID(id uuid.UUID) {
	m.article = &id
}

// ClearArticle clears the "article" edge to the Article entity.
func (m *GalleryMutation) ClearArticle() {
	m.clearedarticle = true
}

// ArticleCleared reports if the "article" edge to the Article entity was cleared.
func (m *GalleryMutation) ArticleCleared() bool {
	return m.clearedarticle
}

// ArticleID returns the "article" edge ID in the mutation.
func (m *GalleryMutation) ArticleID() (id uuid.UUID, exists bool) {
	if m.article != nil {
		return *m.article, true
	}
	return
}

// ArticleIDs returns the "article" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArticleID instead. It exists only for internal usage by the builders.
func (m *GalleryMutation) ArticleIDs() (ids []uuid.UUID) {
	if id := m.article; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArticle resets all changes to the "article" edge.
func (m *GalleryMutation) ResetArticle() {
	m.article = nil
	m.clearedarticle = false
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *GalleryMutation) SetAuthorID(id uuid.UUID) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *GalleryMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *GalleryMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *GalleryMutation) AuthorID() (id uuid.UUID, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *GalleryMutation) AuthorIDs() (ids []uuid.UUID) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *GalleryMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// Where appends a list predicates to the GalleryMutation builder.
func (m *GalleryMutation) Where(ps ...predicate.Gallery) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GalleryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gallery).
func (m *GalleryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GalleryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, gallery.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, gallery.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, gallery.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GalleryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gallery.FieldCreateTime:
		return m.CreateTime()
	case gallery.FieldUpdateTime:
		return m.UpdateTime()
	case gallery.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GalleryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gallery.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case gallery.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case gallery.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Gallery field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GalleryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gallery.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case gallery.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case gallery.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Gallery field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GalleryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GalleryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GalleryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gallery numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GalleryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GalleryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GalleryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gallery nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GalleryMutation) ResetField(name string) error {
	switch name {
	case gallery.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case gallery.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case gallery.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Gallery field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GalleryMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.images != nil {
		edges = append(edges, gallery.EdgeImages)
	}
	if m.article != nil {
		edges = append(edges, gallery.EdgeArticle)
	}
	if m.author != nil {
		edges = append(edges, gallery.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GalleryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gallery.EdgeImages:
		ids := make([]ent.Value, 0, len(m.images))
		for id := range m.images {
			ids = append(ids, id)
		}
		return ids
	case gallery.EdgeArticle:
		if id := m.article; id != nil {
			return []ent.Value{*id}
		}
	case gallery.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GalleryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedimages != nil {
		edges = append(edges, gallery.EdgeImages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GalleryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gallery.EdgeImages:
		ids := make([]ent.Value, 0, len(m.removedimages))
		for id := range m.removedimages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GalleryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedimages {
		edges = append(edges, gallery.EdgeImages)
	}
	if m.clearedarticle {
		edges = append(edges, gallery.EdgeArticle)
	}
	if m.clearedauthor {
		edges = append(edges, gallery.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GalleryMutation) EdgeCleared(name string) bool {
	switch name {
	case gallery.EdgeImages:
		return m.clearedimages
	case gallery.EdgeArticle:
		return m.clearedarticle
	case gallery.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GalleryMutation) ClearEdge(name string) error {
	switch name {
	case gallery.EdgeArticle:
		m.ClearArticle()
		return nil
	case gallery.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Gallery unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GalleryMutation) ResetEdge(name string) error {
	switch name {
	case gallery.EdgeImages:
		m.ResetImages()
		return nil
	case gallery.EdgeArticle:
		m.ResetArticle()
		return nil
	case gallery.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown Gallery edge %s", name)
}

// ImageMutation represents an operation that mutates the Image nodes in the graph.
type ImageMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	create_time    *time.Time
	alt            *string
	_Order         *int
	add_Order      *int
	clearedFields  map[string]struct{}
	gallery        *uuid.UUID
	clearedgallery bool
	blob           *uuid.UUID
	clearedblob    bool
	done           bool
	oldValue       func(context.Context) (*Image, error)
	predicates     []predicate.Image
}

var _ ent.Mutation = (*ImageMutation)(nil)

// imageOption allows management of the mutation configuration using functional options.
type imageOption func(*ImageMutation)

// newImageMutation creates new mutation for the Image entity.
func newImageMutation(c config, op Op, opts ...imageOption) *ImageMutation {
	m := &ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageID sets the ID field of the mutation.
func withImageID(id uuid.UUID) imageOption {
	return func(m *ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *Image
		)
		m.oldValue = func(ctx context.Context) (*Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImage sets the old Image of the mutation.
func withImage(node *Image) imageOption {
	return func(m *ImageMutation) {
		m.oldValue = func(context.Context) (*Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Image entities.
func (m *ImageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ImageMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ImageMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ImageMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetAlt sets the "alt" field.
func (m *ImageMutation) SetAlt(s string) {
	m.alt = &s
}

// Alt returns the value of the "alt" field in the mutation.
func (m *ImageMutation) Alt() (r string, exists bool) {
	v := m.alt
	if v == nil {
		return
	}
	return *v, true
}

// OldAlt returns the old "alt" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldAlt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlt: %w", err)
	}
	return oldValue.Alt, nil
}

// ClearAlt clears the value of the "alt" field.
func (m *ImageMutation) ClearAlt() {
	m.alt = nil
	m.clearedFields[image.FieldAlt] = struct{}{}
}

// AltCleared returns if the "alt" field was cleared in this mutation.
func (m *ImageMutation) AltCleared() bool {
	_, ok := m.clearedFields[image.FieldAlt]
	return ok
}

// ResetAlt resets all changes to the "alt" field.
func (m *ImageMutation) ResetAlt() {
	m.alt = nil
	delete(m.clearedFields, image.FieldAlt)
}

// SetOrder sets the "Order" field.
func (m *ImageMutation) SetOrder(i int) {
	m._Order = &i
	m.add_Order = nil
}

// Order returns the value of the "Order" field in the mutation.
func (m *ImageMutation) Order() (r int, exists bool) {
	v := m._Order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "Order" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "Order" field.
func (m *ImageMutation) AddOrder(i int) {
	if m.add_Order != nil {
		*m.add_Order += i
	} else {
		m.add_Order = &i
	}
}

// AddedOrder returns the value that was added to the "Order" field in this mutation.
func (m *ImageMutation) AddedOrder() (r int, exists bool) {
	v := m.add_Order
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrder clears the value of the "Order" field.
func (m *ImageMutation) ClearOrder() {
	m._Order = nil
	m.add_Order = nil
	m.clearedFields[image.FieldOrder] = struct{}{}
}

// OrderCleared returns if the "Order" field was cleared in this mutation.
func (m *ImageMutation) OrderCleared() bool {
	_, ok := m.clearedFields[image.FieldOrder]
	return ok
}

// ResetOrder resets all changes to the "Order" field.
func (m *ImageMutation) ResetOrder() {
	m._Order = nil
	m.add_Order = nil
	delete(m.clearedFields, image.FieldOrder)
}

// SetBlobId sets the "blobId" field.
func (m *ImageMutation) SetBlobId(u uuid.UUID) {
	m.blob = &u
}

// BlobId returns the value of the "blobId" field in the mutation.
func (m *ImageMutation) BlobId() (r uuid.UUID, exists bool) {
	v := m.blob
	if v == nil {
		return
	}
	return *v, true
}

// OldBlobId returns the old "blobId" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldBlobId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlobId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlobId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlobId: %w", err)
	}
	return oldValue.BlobId, nil
}

// ResetBlobId resets all changes to the "blobId" field.
func (m *ImageMutation) ResetBlobId() {
	m.blob = nil
}

// SetGalleryID sets the "gallery" edge to the Gallery entity by id.
func (m *ImageMutation) SetGalleryID(id uuid.UUID) {
	m.gallery = &id
}

// ClearGallery clears the "gallery" edge to the Gallery entity.
func (m *ImageMutation) ClearGallery() {
	m.clearedgallery = true
}

// GalleryCleared reports if the "gallery" edge to the Gallery entity was cleared.
func (m *ImageMutation) GalleryCleared() bool {
	return m.clearedgallery
}

// GalleryID returns the "gallery" edge ID in the mutation.
func (m *ImageMutation) GalleryID() (id uuid.UUID, exists bool) {
	if m.gallery != nil {
		return *m.gallery, true
	}
	return
}

// GalleryIDs returns the "gallery" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GalleryID instead. It exists only for internal usage by the builders.
func (m *ImageMutation) GalleryIDs() (ids []uuid.UUID) {
	if id := m.gallery; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGallery resets all changes to the "gallery" edge.
func (m *ImageMutation) ResetGallery() {
	m.gallery = nil
	m.clearedgallery = false
}

// SetBlobID sets the "blob" edge to the Blob entity by id.
func (m *ImageMutation) SetBlobID(id uuid.UUID) {
	m.blob = &id
}

// ClearBlob clears the "blob" edge to the Blob entity.
func (m *ImageMutation) ClearBlob() {
	m.clearedblob = true
}

// BlobCleared reports if the "blob" edge to the Blob entity was cleared.
func (m *ImageMutation) BlobCleared() bool {
	return m.clearedblob
}

// BlobID returns the "blob" edge ID in the mutation.
func (m *ImageMutation) BlobID() (id uuid.UUID, exists bool) {
	if m.blob != nil {
		return *m.blob, true
	}
	return
}

// BlobIDs returns the "blob" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlobID instead. It exists only for internal usage by the builders.
func (m *ImageMutation) BlobIDs() (ids []uuid.UUID) {
	if id := m.blob; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlob resets all changes to the "blob" edge.
func (m *ImageMutation) ResetBlob() {
	m.blob = nil
	m.clearedblob = false
}

// Where appends a list predicates to the ImageMutation builder.
func (m *ImageMutation) Where(ps ...predicate.Image) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ImageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Image).
func (m *ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, image.FieldCreateTime)
	}
	if m.alt != nil {
		fields = append(fields, image.FieldAlt)
	}
	if m._Order != nil {
		fields = append(fields, image.FieldOrder)
	}
	if m.blob != nil {
		fields = append(fields, image.FieldBlobId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case image.FieldCreateTime:
		return m.CreateTime()
	case image.FieldAlt:
		return m.Alt()
	case image.FieldOrder:
		return m.Order()
	case image.FieldBlobId:
		return m.BlobId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case image.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case image.FieldAlt:
		return m.OldAlt(ctx)
	case image.FieldOrder:
		return m.OldOrder(ctx)
	case image.FieldBlobId:
		return m.OldBlobId(ctx)
	}
	return nil, fmt.Errorf("unknown Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case image.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case image.FieldAlt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlt(v)
		return nil
	case image.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case image.FieldBlobId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlobId(v)
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMutation) AddedFields() []string {
	var fields []string
	if m.add_Order != nil {
		fields = append(fields, image.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case image.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case image.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(image.FieldAlt) {
		fields = append(fields, image.FieldAlt)
	}
	if m.FieldCleared(image.FieldOrder) {
		fields = append(fields, image.FieldOrder)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMutation) ClearField(name string) error {
	switch name {
	case image.FieldAlt:
		m.ClearAlt()
		return nil
	case image.FieldOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMutation) ResetField(name string) error {
	switch name {
	case image.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case image.FieldAlt:
		m.ResetAlt()
		return nil
	case image.FieldOrder:
		m.ResetOrder()
		return nil
	case image.FieldBlobId:
		m.ResetBlobId()
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.gallery != nil {
		edges = append(edges, image.EdgeGallery)
	}
	if m.blob != nil {
		edges = append(edges, image.EdgeBlob)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeGallery:
		if id := m.gallery; id != nil {
			return []ent.Value{*id}
		}
	case image.EdgeBlob:
		if id := m.blob; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgallery {
		edges = append(edges, image.EdgeGallery)
	}
	if m.clearedblob {
		edges = append(edges, image.EdgeBlob)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMutation) EdgeCleared(name string) bool {
	switch name {
	case image.EdgeGallery:
		return m.clearedgallery
	case image.EdgeBlob:
		return m.clearedblob
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMutation) ClearEdge(name string) error {
	switch name {
	case image.EdgeGallery:
		m.ClearGallery()
		return nil
	case image.EdgeBlob:
		m.ClearBlob()
		return nil
	}
	return fmt.Errorf("unknown Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMutation) ResetEdge(name string) error {
	switch name {
	case image.EdgeGallery:
		m.ResetGallery()
		return nil
	case image.EdgeBlob:
		m.ResetBlob()
		return nil
	}
	return fmt.Errorf("unknown Image edge %s", name)
}

// ResetPasswordTokenMutation represents an operation that mutates the ResetPasswordToken nodes in the graph.
type ResetPasswordTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	createdAt     *time.Time
	clearedFields map[string]struct{}
	owner         *uuid.UUID
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*ResetPasswordToken, error)
	predicates    []predicate.ResetPasswordToken
}

var _ ent.Mutation = (*ResetPasswordTokenMutation)(nil)

// resetpasswordtokenOption allows management of the mutation configuration using functional options.
type resetpasswordtokenOption func(*ResetPasswordTokenMutation)

// newResetPasswordTokenMutation creates new mutation for the ResetPasswordToken entity.
func newResetPasswordTokenMutation(c config, op Op, opts ...resetpasswordtokenOption) *ResetPasswordTokenMutation {
	m := &ResetPasswordTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeResetPasswordToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResetPasswordTokenID sets the ID field of the mutation.
func withResetPasswordTokenID(id uuid.UUID) resetpasswordtokenOption {
	return func(m *ResetPasswordTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *ResetPasswordToken
		)
		m.oldValue = func(ctx context.Context) (*ResetPasswordToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ResetPasswordToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResetPasswordToken sets the old ResetPasswordToken of the mutation.
func withResetPasswordToken(node *ResetPasswordToken) resetpasswordtokenOption {
	return func(m *ResetPasswordTokenMutation) {
		m.oldValue = func(context.Context) (*ResetPasswordToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResetPasswordTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResetPasswordTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ResetPasswordToken entities.
func (m *ResetPasswordTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResetPasswordTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResetPasswordTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ResetPasswordToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "createdAt" field.
func (m *ResetPasswordTokenMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *ResetPasswordTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the ResetPasswordToken entity.
// If the ResetPasswordToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResetPasswordTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *ResetPasswordTokenMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *ResetPasswordTokenMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *ResetPasswordTokenMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *ResetPasswordTokenMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *ResetPasswordTokenMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ResetPasswordTokenMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ResetPasswordTokenMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the ResetPasswordTokenMutation builder.
func (m *ResetPasswordTokenMutation) Where(ps ...predicate.ResetPasswordToken) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ResetPasswordTokenMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ResetPasswordToken).
func (m *ResetPasswordTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResetPasswordTokenMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.createdAt != nil {
		fields = append(fields, resetpasswordtoken.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResetPasswordTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case resetpasswordtoken.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResetPasswordTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case resetpasswordtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ResetPasswordToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResetPasswordTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case resetpasswordtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ResetPasswordToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResetPasswordTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResetPasswordTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResetPasswordTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ResetPasswordToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResetPasswordTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResetPasswordTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResetPasswordTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ResetPasswordToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResetPasswordTokenMutation) ResetField(name string) error {
	switch name {
	case resetpasswordtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ResetPasswordToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResetPasswordTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, resetpasswordtoken.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResetPasswordTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case resetpasswordtoken.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResetPasswordTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResetPasswordTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResetPasswordTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, resetpasswordtoken.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResetPasswordTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case resetpasswordtoken.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResetPasswordTokenMutation) ClearEdge(name string) error {
	switch name {
	case resetpasswordtoken.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown ResetPasswordToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResetPasswordTokenMutation) ResetEdge(name string) error {
	switch name {
	case resetpasswordtoken.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown ResetPasswordToken edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	password                   *string
	email                      *string
	firstName                  *string
	lastName                   *string
	role                       *user.Role
	clearedFields              map[string]struct{}
	galleries                  map[uuid.UUID]struct{}
	removedgalleries           map[uuid.UUID]struct{}
	clearedgalleries           bool
	articles                   map[uuid.UUID]struct{}
	removedarticles            map[uuid.UUID]struct{}
	clearedarticles            bool
	avatar                     *uuid.UUID
	clearedavatar              bool
	resetPasswordTokens        map[uuid.UUID]struct{}
	removedresetPasswordTokens map[uuid.UUID]struct{}
	clearedresetPasswordTokens bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetFirstName sets the "firstName" field.
func (m *UserMutation) SetFirstName(s string) {
	m.firstName = &s
}

// FirstName returns the value of the "firstName" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.firstName
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "firstName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "firstName" field.
func (m *UserMutation) ClearFirstName() {
	m.firstName = nil
	m.clearedFields[user.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "firstName" field was cleared in this mutation.
func (m *UserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "firstName" field.
func (m *UserMutation) ResetFirstName() {
	m.firstName = nil
	delete(m.clearedFields, user.FieldFirstName)
}

// SetLastName sets the "lastName" field.
func (m *UserMutation) SetLastName(s string) {
	m.lastName = &s
}

// LastName returns the value of the "lastName" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.lastName
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "lastName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "lastName" field.
func (m *UserMutation) ClearLastName() {
	m.lastName = nil
	m.clearedFields[user.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "lastName" field was cleared in this mutation.
func (m *UserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[user.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "lastName" field.
func (m *UserMutation) ResetLastName() {
	m.lastName = nil
	delete(m.clearedFields, user.FieldLastName)
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// AddGalleryIDs adds the "galleries" edge to the Gallery entity by ids.
func (m *UserMutation) AddGalleryIDs(ids ...uuid.UUID) {
	if m.galleries == nil {
		m.galleries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.galleries[ids[i]] = struct{}{}
	}
}

// ClearGalleries clears the "galleries" edge to the Gallery entity.
func (m *UserMutation) ClearGalleries() {
	m.clearedgalleries = true
}

// GalleriesCleared reports if the "galleries" edge to the Gallery entity was cleared.
func (m *UserMutation) GalleriesCleared() bool {
	return m.clearedgalleries
}

// RemoveGalleryIDs removes the "galleries" edge to the Gallery entity by IDs.
func (m *UserMutation) RemoveGalleryIDs(ids ...uuid.UUID) {
	if m.removedgalleries == nil {
		m.removedgalleries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.galleries, ids[i])
		m.removedgalleries[ids[i]] = struct{}{}
	}
}

// RemovedGalleries returns the removed IDs of the "galleries" edge to the Gallery entity.
func (m *UserMutation) RemovedGalleriesIDs() (ids []uuid.UUID) {
	for id := range m.removedgalleries {
		ids = append(ids, id)
	}
	return
}

// GalleriesIDs returns the "galleries" edge IDs in the mutation.
func (m *UserMutation) GalleriesIDs() (ids []uuid.UUID) {
	for id := range m.galleries {
		ids = append(ids, id)
	}
	return
}

// ResetGalleries resets all changes to the "galleries" edge.
func (m *UserMutation) ResetGalleries() {
	m.galleries = nil
	m.clearedgalleries = false
	m.removedgalleries = nil
}

// AddArticleIDs adds the "articles" edge to the Article entity by ids.
func (m *UserMutation) AddArticleIDs(ids ...uuid.UUID) {
	if m.articles == nil {
		m.articles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.articles[ids[i]] = struct{}{}
	}
}

// ClearArticles clears the "articles" edge to the Article entity.
func (m *UserMutation) ClearArticles() {
	m.clearedarticles = true
}

// ArticlesCleared reports if the "articles" edge to the Article entity was cleared.
func (m *UserMutation) ArticlesCleared() bool {
	return m.clearedarticles
}

// RemoveArticleIDs removes the "articles" edge to the Article entity by IDs.
func (m *UserMutation) RemoveArticleIDs(ids ...uuid.UUID) {
	if m.removedarticles == nil {
		m.removedarticles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.articles, ids[i])
		m.removedarticles[ids[i]] = struct{}{}
	}
}

// RemovedArticles returns the removed IDs of the "articles" edge to the Article entity.
func (m *UserMutation) RemovedArticlesIDs() (ids []uuid.UUID) {
	for id := range m.removedarticles {
		ids = append(ids, id)
	}
	return
}

// ArticlesIDs returns the "articles" edge IDs in the mutation.
func (m *UserMutation) ArticlesIDs() (ids []uuid.UUID) {
	for id := range m.articles {
		ids = append(ids, id)
	}
	return
}

// ResetArticles resets all changes to the "articles" edge.
func (m *UserMutation) ResetArticles() {
	m.articles = nil
	m.clearedarticles = false
	m.removedarticles = nil
}

// SetAvatarID sets the "avatar" edge to the Image entity by id.
func (m *UserMutation) SetAvatarID(id uuid.UUID) {
	m.avatar = &id
}

// ClearAvatar clears the "avatar" edge to the Image entity.
func (m *UserMutation) ClearAvatar() {
	m.clearedavatar = true
}

// AvatarCleared reports if the "avatar" edge to the Image entity was cleared.
func (m *UserMutation) AvatarCleared() bool {
	return m.clearedavatar
}

// AvatarID returns the "avatar" edge ID in the mutation.
func (m *UserMutation) AvatarID() (id uuid.UUID, exists bool) {
	if m.avatar != nil {
		return *m.avatar, true
	}
	return
}

// AvatarIDs returns the "avatar" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AvatarID instead. It exists only for internal usage by the builders.
func (m *UserMutation) AvatarIDs() (ids []uuid.UUID) {
	if id := m.avatar; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAvatar resets all changes to the "avatar" edge.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	m.clearedavatar = false
}

// AddResetPasswordTokenIDs adds the "resetPasswordTokens" edge to the ResetPasswordToken entity by ids.
func (m *UserMutation) AddResetPasswordTokenIDs(ids ...uuid.UUID) {
	if m.resetPasswordTokens == nil {
		m.resetPasswordTokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.resetPasswordTokens[ids[i]] = struct{}{}
	}
}

// ClearResetPasswordTokens clears the "resetPasswordTokens" edge to the ResetPasswordToken entity.
func (m *UserMutation) ClearResetPasswordTokens() {
	m.clearedresetPasswordTokens = true
}

// ResetPasswordTokensCleared reports if the "resetPasswordTokens" edge to the ResetPasswordToken entity was cleared.
func (m *UserMutation) ResetPasswordTokensCleared() bool {
	return m.clearedresetPasswordTokens
}

// RemoveResetPasswordTokenIDs removes the "resetPasswordTokens" edge to the ResetPasswordToken entity by IDs.
func (m *UserMutation) RemoveResetPasswordTokenIDs(ids ...uuid.UUID) {
	if m.removedresetPasswordTokens == nil {
		m.removedresetPasswordTokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.resetPasswordTokens, ids[i])
		m.removedresetPasswordTokens[ids[i]] = struct{}{}
	}
}

// RemovedResetPasswordTokens returns the removed IDs of the "resetPasswordTokens" edge to the ResetPasswordToken entity.
func (m *UserMutation) RemovedResetPasswordTokensIDs() (ids []uuid.UUID) {
	for id := range m.removedresetPasswordTokens {
		ids = append(ids, id)
	}
	return
}

// ResetPasswordTokensIDs returns the "resetPasswordTokens" edge IDs in the mutation.
func (m *UserMutation) ResetPasswordTokensIDs() (ids []uuid.UUID) {
	for id := range m.resetPasswordTokens {
		ids = append(ids, id)
	}
	return
}

// ResetResetPasswordTokens resets all changes to the "resetPasswordTokens" edge.
func (m *UserMutation) ResetResetPasswordTokens() {
	m.resetPasswordTokens = nil
	m.clearedresetPasswordTokens = false
	m.removedresetPasswordTokens = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.firstName != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.lastName != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmail:
		return m.Email()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldFirstName) {
		fields = append(fields, user.FieldFirstName)
	}
	if m.FieldCleared(user.FieldLastName) {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ClearFirstName()
		return nil
	case user.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.galleries != nil {
		edges = append(edges, user.EdgeGalleries)
	}
	if m.articles != nil {
		edges = append(edges, user.EdgeArticles)
	}
	if m.avatar != nil {
		edges = append(edges, user.EdgeAvatar)
	}
	if m.resetPasswordTokens != nil {
		edges = append(edges, user.EdgeResetPasswordTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGalleries:
		ids := make([]ent.Value, 0, len(m.galleries))
		for id := range m.galleries {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.articles))
		for id := range m.articles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAvatar:
		if id := m.avatar; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeResetPasswordTokens:
		ids := make([]ent.Value, 0, len(m.resetPasswordTokens))
		for id := range m.resetPasswordTokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedgalleries != nil {
		edges = append(edges, user.EdgeGalleries)
	}
	if m.removedarticles != nil {
		edges = append(edges, user.EdgeArticles)
	}
	if m.removedresetPasswordTokens != nil {
		edges = append(edges, user.EdgeResetPasswordTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGalleries:
		ids := make([]ent.Value, 0, len(m.removedgalleries))
		for id := range m.removedgalleries {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.removedarticles))
		for id := range m.removedarticles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeResetPasswordTokens:
		ids := make([]ent.Value, 0, len(m.removedresetPasswordTokens))
		for id := range m.removedresetPasswordTokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedgalleries {
		edges = append(edges, user.EdgeGalleries)
	}
	if m.clearedarticles {
		edges = append(edges, user.EdgeArticles)
	}
	if m.clearedavatar {
		edges = append(edges, user.EdgeAvatar)
	}
	if m.clearedresetPasswordTokens {
		edges = append(edges, user.EdgeResetPasswordTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGalleries:
		return m.clearedgalleries
	case user.EdgeArticles:
		return m.clearedarticles
	case user.EdgeAvatar:
		return m.clearedavatar
	case user.EdgeResetPasswordTokens:
		return m.clearedresetPasswordTokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGalleries:
		m.ResetGalleries()
		return nil
	case user.EdgeArticles:
		m.ResetArticles()
		return nil
	case user.EdgeAvatar:
		m.ResetAvatar()
		return nil
	case user.EdgeResetPasswordTokens:
		m.ResetResetPasswordTokens()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
