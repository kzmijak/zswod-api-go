// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kzmijak/zswod_api_go/ent/attachment"
	"github.com/kzmijak/zswod_api_go/ent/custompage"
)

// CustomPageCreate is the builder for creating a CustomPage entity.
type CustomPageCreate struct {
	config
	mutation *CustomPageMutation
	hooks    []Hook
}

// SetIconId sets the "iconId" field.
func (cpc *CustomPageCreate) SetIconId(s string) *CustomPageCreate {
	cpc.mutation.SetIconId(s)
	return cpc
}

// SetNillableIconId sets the "iconId" field if the given value is not nil.
func (cpc *CustomPageCreate) SetNillableIconId(s *string) *CustomPageCreate {
	if s != nil {
		cpc.SetIconId(*s)
	}
	return cpc
}

// SetUpdateTime sets the "update_time" field.
func (cpc *CustomPageCreate) SetUpdateTime(t time.Time) *CustomPageCreate {
	cpc.mutation.SetUpdateTime(t)
	return cpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cpc *CustomPageCreate) SetNillableUpdateTime(t *time.Time) *CustomPageCreate {
	if t != nil {
		cpc.SetUpdateTime(*t)
	}
	return cpc
}

// SetOrder sets the "order" field.
func (cpc *CustomPageCreate) SetOrder(i int) *CustomPageCreate {
	cpc.mutation.SetOrder(i)
	return cpc
}

// SetTitle sets the "title" field.
func (cpc *CustomPageCreate) SetTitle(s string) *CustomPageCreate {
	cpc.mutation.SetTitle(s)
	return cpc
}

// SetTitleNormalized sets the "titleNormalized" field.
func (cpc *CustomPageCreate) SetTitleNormalized(s string) *CustomPageCreate {
	cpc.mutation.SetTitleNormalized(s)
	return cpc
}

// SetContent sets the "content" field.
func (cpc *CustomPageCreate) SetContent(s string) *CustomPageCreate {
	cpc.mutation.SetContent(s)
	return cpc
}

// SetIsExternal sets the "isExternal" field.
func (cpc *CustomPageCreate) SetIsExternal(b bool) *CustomPageCreate {
	cpc.mutation.SetIsExternal(b)
	return cpc
}

// SetNillableIsExternal sets the "isExternal" field if the given value is not nil.
func (cpc *CustomPageCreate) SetNillableIsExternal(b *bool) *CustomPageCreate {
	if b != nil {
		cpc.SetIsExternal(*b)
	}
	return cpc
}

// SetLink sets the "link" field.
func (cpc *CustomPageCreate) SetLink(s string) *CustomPageCreate {
	cpc.mutation.SetLink(s)
	return cpc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cpc *CustomPageCreate) SetNillableLink(s *string) *CustomPageCreate {
	if s != nil {
		cpc.SetLink(*s)
	}
	return cpc
}

// SetSection sets the "section" field.
func (cpc *CustomPageCreate) SetSection(s string) *CustomPageCreate {
	cpc.mutation.SetSection(s)
	return cpc
}

// SetID sets the "id" field.
func (cpc *CustomPageCreate) SetID(u uuid.UUID) *CustomPageCreate {
	cpc.mutation.SetID(u)
	return cpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cpc *CustomPageCreate) SetNillableID(u *uuid.UUID) *CustomPageCreate {
	if u != nil {
		cpc.SetID(*u)
	}
	return cpc
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (cpc *CustomPageCreate) AddAttachmentIDs(ids ...uuid.UUID) *CustomPageCreate {
	cpc.mutation.AddAttachmentIDs(ids...)
	return cpc
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (cpc *CustomPageCreate) AddAttachments(a ...*Attachment) *CustomPageCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cpc.AddAttachmentIDs(ids...)
}

// Mutation returns the CustomPageMutation object of the builder.
func (cpc *CustomPageCreate) Mutation() *CustomPageMutation {
	return cpc.mutation
}

// Save creates the CustomPage in the database.
func (cpc *CustomPageCreate) Save(ctx context.Context) (*CustomPage, error) {
	var (
		err  error
		node *CustomPage
	)
	cpc.defaults()
	if len(cpc.hooks) == 0 {
		if err = cpc.check(); err != nil {
			return nil, err
		}
		node, err = cpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomPageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpc.check(); err != nil {
				return nil, err
			}
			cpc.mutation = mutation
			if node, err = cpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpc.hooks) - 1; i >= 0; i-- {
			if cpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CustomPage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CustomPageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CustomPageCreate) SaveX(ctx context.Context) *CustomPage {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CustomPageCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CustomPageCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CustomPageCreate) defaults() {
	if _, ok := cpc.mutation.UpdateTime(); !ok {
		v := custompage.DefaultUpdateTime()
		cpc.mutation.SetUpdateTime(v)
	}
	if _, ok := cpc.mutation.ID(); !ok {
		v := custompage.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CustomPageCreate) check() error {
	if _, ok := cpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CustomPage.update_time"`)}
	}
	if _, ok := cpc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "CustomPage.order"`)}
	}
	if _, ok := cpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "CustomPage.title"`)}
	}
	if v, ok := cpc.mutation.Title(); ok {
		if err := custompage.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CustomPage.title": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.TitleNormalized(); !ok {
		return &ValidationError{Name: "titleNormalized", err: errors.New(`ent: missing required field "CustomPage.titleNormalized"`)}
	}
	if _, ok := cpc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "CustomPage.content"`)}
	}
	if _, ok := cpc.mutation.Section(); !ok {
		return &ValidationError{Name: "section", err: errors.New(`ent: missing required field "CustomPage.section"`)}
	}
	return nil
}

func (cpc *CustomPageCreate) sqlSave(ctx context.Context) (*CustomPage, error) {
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cpc *CustomPageCreate) createSpec() (*CustomPage, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomPage{config: cpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: custompage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: custompage.FieldID,
			},
		}
	)
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cpc.mutation.IconId(); ok {
		_spec.SetField(custompage.FieldIconId, field.TypeString, value)
		_node.IconId = value
	}
	if value, ok := cpc.mutation.UpdateTime(); ok {
		_spec.SetField(custompage.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cpc.mutation.Order(); ok {
		_spec.SetField(custompage.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := cpc.mutation.Title(); ok {
		_spec.SetField(custompage.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cpc.mutation.TitleNormalized(); ok {
		_spec.SetField(custompage.FieldTitleNormalized, field.TypeString, value)
		_node.TitleNormalized = value
	}
	if value, ok := cpc.mutation.Content(); ok {
		_spec.SetField(custompage.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cpc.mutation.IsExternal(); ok {
		_spec.SetField(custompage.FieldIsExternal, field.TypeBool, value)
		_node.IsExternal = value
	}
	if value, ok := cpc.mutation.Link(); ok {
		_spec.SetField(custompage.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := cpc.mutation.Section(); ok {
		_spec.SetField(custompage.FieldSection, field.TypeString, value)
		_node.Section = value
	}
	if nodes := cpc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custompage.AttachmentsTable,
			Columns: []string{custompage.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomPageCreateBulk is the builder for creating many CustomPage entities in bulk.
type CustomPageCreateBulk struct {
	config
	builders []*CustomPageCreate
}

// Save creates the CustomPage entities in the database.
func (cpcb *CustomPageCreateBulk) Save(ctx context.Context) ([]*CustomPage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CustomPage, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomPageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CustomPageCreateBulk) SaveX(ctx context.Context) []*CustomPage {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CustomPageCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CustomPageCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
